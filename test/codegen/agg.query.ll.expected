; ModuleID = 'scanner'
source_filename = "scanner"

%params = type { [1 x i64]* }

@true_str = private unnamed_addr constant [2 x i8] c"t\00", align 1
@false_str = private unnamed_addr constant [2 x i8] c"f\00", align 1
@null_str = private unnamed_addr constant [5 x i8] c"null\00", align 1
@void_str = private unnamed_addr constant [3 x i8] c"()\00", align 1
@sep_str = private unnamed_addr constant [2 x i8] c"|\00", align 1
@newline_str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@int_fmt = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@str_fmt = private unnamed_addr constant [5 x i8] c"%.*s\00", align 1
@float_fmt = private unnamed_addr constant [3 x i8] c"%f\00", align 1
@date_fmt = private unnamed_addr constant [15 x i8] c"%04d-%02d-%02d\00", align 1

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #0

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #0

; Function Attrs: argmemonly readonly speculatable
declare i32 @cmph_search_packed(i8*, i8*, i32) #1

declare i32 @printf(i8*, ...)

; Function Attrs: argmemonly norecurse nounwind readonly speculatable
declare i32 @strncmp(i8* noalias nocapture, i8* noalias nocapture, i64) #2

declare i8* @strncpy(i8*, i8*, i32)

; Function Attrs: argmemonly norecurse nounwind readonly speculatable
declare i64 @strpos(i8* nocapture, i64, i8* nocapture, i64) #2

; Function Attrs: readnone
declare i64 @extract_year(i64) #3

; Function Attrs: readnone
declare i64 @extract_month(i64) #3

; Function Attrs: readnone
declare i64 @extract_day(i64) #3

; Function Attrs: readnone
declare i64 @add_month(i64, i64) #3

; Function Attrs: readnone
declare i64 @add_year(i64, i64) #3

; Function Attrs: argmemonly norecurse nounwind readonly speculatable
define i1 @scmp({ i8*, i64 } %0, { i8*, i64 } %1) #2 {
entry:
  %len = extractvalue { i8*, i64 } %0, 1
  %pos = extractvalue { i8*, i64 } %0, 0
  %len1 = extractvalue { i8*, i64 } %1, 1
  %pos2 = extractvalue { i8*, i64 } %1, 0
  %len_cmp = icmp eq i64 %len, %len1
  br i1 %len_cmp, label %eq, label %neq

eq:                                               ; preds = %entry
  %str_cmp = call i32 @strncmp(i8* %pos, i8* %pos2, i64 %len), !tbaa !0
  %str_cmp3 = icmp eq i32 %str_cmp, 0
  ret i1 %str_cmp3

neq:                                              ; preds = %entry
  ret i1 false
}

; Function Attrs: argmemonly norecurse nounwind readonly
define void @printer(%params* noalias %0) #4 {
entry:
  %tupleptrtmp45 = alloca { double, double, i64, double, double, double }, align 8
  %tupleptrtmp = alloca { double }, align 8
  %hoisted0 = alloca double, align 8
  %hoisted1 = alloca double, align 8
  %found_tup1 = alloca i1, align 1
  %min6 = alloca double, align 8
  %avg_num3 = alloca double, align 8
  %sum5 = alloca double, align 8
  %count4 = alloca i64, align 8
  %tup0 = alloca { double }, align 8
  %cstart8 = alloca i64, align 8
  %count10 = alloca i64, align 8
  %i9 = alloca i64, align 8
  %max7 = alloca double, align 8
  %avg_dem2 = alloca i64, align 8
  store double 1.000000e+02, double* %hoisted0, align 8, !tbaa !3
  store double 3.000000e+00, double* %hoisted1, align 8, !tbaa !3
  store i1 false, i1* %found_tup1, align 1, !tbaa !3
  store i64 0, i64* %avg_dem2, align 8, !tbaa !3
  store double 0.000000e+00, double* %avg_num3, align 8, !tbaa !3
  store i64 0, i64* %count4, align 8, !tbaa !3
  store double 0.000000e+00, double* %sum5, align 8, !tbaa !3
  store double 0x43D0000000000000, double* %min6, align 8, !tbaa !3
  store double 0xC3D0000000000000, double* %max7, align 8, !tbaa !3
  store i64 0, i64* %cstart8, align 8, !tbaa !3
  store i64 0, i64* %i9, align 8, !tbaa !3
  store i64 5, i64* %count10, align 8, !tbaa !3
  br label %loopcond

loopcond:                                         ; preds = %entry
  %i91 = load i64, i64* %i9, align 8, !tbaa !3
  %count102 = load i64, i64* %count10, align 8, !tbaa !3
  %lttmp = icmp slt i64 %i91, %count102
  br i1 %lttmp, label %loopbody, label %loopend

loopbody:                                         ; preds = %loopbody, %loopcond
  %cstart83 = load i64, i64* %cstart8, align 8, !tbaa !3
  %buf = getelementptr inbounds %params, %params* %0, i32 0, i32 0
  %buf_ptr = load [1 x i64]*, [1 x i64]** %buf, align 8, !tbaa !5
  %buf_ptr_cast = bitcast [1 x i64]* %buf_ptr to i8*
  %slice_ptr = getelementptr inbounds i8, i8* %buf_ptr_cast, i64 %cstart83
  %slice_ptr_cast = bitcast i8* %slice_ptr to i16*
  %slice_val = load i16, i16* %slice_ptr_cast, align 2, !tbaa !7
  %int_val = sext i16 %slice_val to i64
  %1 = sitofp i64 %int_val to double
  %hoisted04 = load double, double* %hoisted0, align 8, !tbaa !3
  %divtmp = fdiv double %1, %hoisted04
  %ptrtmp = getelementptr inbounds { double }, { double }* %tupleptrtmp, i32 0, i32 0
  store double %divtmp, double* %ptrtmp, align 8, !tbaa !3
  %tupletmp = load { double }, { double }* %tupleptrtmp, align 8, !tbaa !3
  store { double } %tupletmp, { double }* %tup0, align 8, !tbaa !3
  %avg_num35 = load double, double* %avg_num3, align 8, !tbaa !3
  %tup06 = load { double }, { double }* %tup0, align 8, !tbaa !3
  %elemtmp = extractvalue { double } %tup06, 0
  %addtmp = fadd double %avg_num35, %elemtmp
  store double %addtmp, double* %avg_num3, align 8, !tbaa !3
  %avg_dem27 = load i64, i64* %avg_dem2, align 8, !tbaa !3
  %addtmp8 = add nsw i64 %avg_dem27, 1
  store i64 %addtmp8, i64* %avg_dem2, align 8, !tbaa !3
  %count49 = load i64, i64* %count4, align 8, !tbaa !3
  %addtmp10 = add nsw i64 %count49, 1
  store i64 %addtmp10, i64* %count4, align 8, !tbaa !3
  %sum511 = load double, double* %sum5, align 8, !tbaa !3
  %tup012 = load { double }, { double }* %tup0, align 8, !tbaa !3
  %elemtmp13 = extractvalue { double } %tup012, 0
  %addtmp14 = fadd double %sum511, %elemtmp13
  store double %addtmp14, double* %sum5, align 8, !tbaa !3
  %tup015 = load { double }, { double }* %tup0, align 8, !tbaa !3
  %elemtmp16 = extractvalue { double } %tup015, 0
  %min617 = load double, double* %min6, align 8, !tbaa !3
  %lttmp18 = fcmp olt double %elemtmp16, %min617
  %tup019 = load { double }, { double }* %tup0, align 8, !tbaa !3
  %elemtmp20 = extractvalue { double } %tup019, 0
  %min621 = load double, double* %min6, align 8, !tbaa !3
  %2 = select i1 %lttmp18, double %elemtmp20, double %min621
  store double %2, double* %min6, align 8, !tbaa !3
  %tup022 = load { double }, { double }* %tup0, align 8, !tbaa !3
  %elemtmp23 = extractvalue { double } %tup022, 0
  %max724 = load double, double* %max7, align 8, !tbaa !3
  %lttmp25 = fcmp olt double %elemtmp23, %max724
  %max726 = load double, double* %max7, align 8, !tbaa !3
  %tup027 = load { double }, { double }* %tup0, align 8, !tbaa !3
  %elemtmp28 = extractvalue { double } %tup027, 0
  %3 = select i1 %lttmp25, double %max726, double %elemtmp28
  store double %3, double* %max7, align 8, !tbaa !3
  store i1 true, i1* %found_tup1, align 1, !tbaa !3
  %cstart829 = load i64, i64* %cstart8, align 8, !tbaa !3
  %addtmp30 = add nsw i64 %cstart829, 2
  store i64 %addtmp30, i64* %cstart8, align 8, !tbaa !3
  %i931 = load i64, i64* %i9, align 8, !tbaa !3
  %addtmp32 = add nsw i64 %i931, 1
  store i64 %addtmp32, i64* %i9, align 8, !tbaa !3
  %i933 = load i64, i64* %i9, align 8, !tbaa !3
  %count1034 = load i64, i64* %count10, align 8, !tbaa !3
  %lttmp35 = icmp slt i64 %i933, %count1034
  br i1 %lttmp35, label %loopbody, label %loopend

loopend:                                          ; preds = %loopbody, %loopcond
  br label %if

if:                                               ; preds = %loopend
  %found_tup136 = load i1, i1* %found_tup1, align 1, !tbaa !3
  br i1 %found_tup136, label %then, label %else

then:                                             ; preds = %if
  %hoisted137 = load double, double* %hoisted1, align 8, !tbaa !3
  %avg_num338 = load double, double* %avg_num3, align 8, !tbaa !3
  %avg_dem239 = load i64, i64* %avg_dem2, align 8, !tbaa !3
  %4 = sitofp i64 %avg_dem239 to double
  %divtmp40 = fdiv double %avg_num338, %4
  %count441 = load i64, i64* %count4, align 8, !tbaa !3
  %sum542 = load double, double* %sum5, align 8, !tbaa !3
  %min643 = load double, double* %min6, align 8, !tbaa !3
  %max744 = load double, double* %max7, align 8, !tbaa !3
  %ptrtmp46 = getelementptr inbounds { double, double, i64, double, double, double }, { double, double, i64, double, double, double }* %tupleptrtmp45, i32 0, i32 0
  store double %hoisted137, double* %ptrtmp46, align 8, !tbaa !3
  %ptrtmp47 = getelementptr inbounds { double, double, i64, double, double, double }, { double, double, i64, double, double, double }* %tupleptrtmp45, i32 0, i32 1
  store double %divtmp40, double* %ptrtmp47, align 8, !tbaa !3
  %ptrtmp48 = getelementptr inbounds { double, double, i64, double, double, double }, { double, double, i64, double, double, double }* %tupleptrtmp45, i32 0, i32 2
  store i64 %count441, i64* %ptrtmp48, align 8, !tbaa !3
  %ptrtmp49 = getelementptr inbounds { double, double, i64, double, double, double }, { double, double, i64, double, double, double }* %tupleptrtmp45, i32 0, i32 3
  store double %sum542, double* %ptrtmp49, align 8, !tbaa !3
  %ptrtmp50 = getelementptr inbounds { double, double, i64, double, double, double }, { double, double, i64, double, double, double }* %tupleptrtmp45, i32 0, i32 4
  store double %min643, double* %ptrtmp50, align 8, !tbaa !3
  %ptrtmp51 = getelementptr inbounds { double, double, i64, double, double, double }, { double, double, i64, double, double, double }* %tupleptrtmp45, i32 0, i32 5
  store double %max744, double* %ptrtmp51, align 8, !tbaa !3
  %tupletmp52 = load { double, double, i64, double, double, double }, { double, double, i64, double, double, double }* %tupleptrtmp45, align 8, !tbaa !3
  %elemtmp53 = extractvalue { double, double, i64, double, double, double } %tupletmp52, 5
  %elemtmp54 = extractvalue { double, double, i64, double, double, double } %tupletmp52, 4
  %elemtmp55 = extractvalue { double, double, i64, double, double, double } %tupletmp52, 3
  %elemtmp56 = extractvalue { double, double, i64, double, double, double } %tupletmp52, 2
  %elemtmp57 = extractvalue { double, double, i64, double, double, double } %tupletmp52, 1
  %elemtmp58 = extractvalue { double, double, i64, double, double, double } %tupletmp52, 0
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @float_fmt, i32 0, i32 0), double %elemtmp58)
  %6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @sep_str, i32 0, i32 0))
  %7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @float_fmt, i32 0, i32 0), double %elemtmp57)
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @sep_str, i32 0, i32 0))
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @int_fmt, i32 0, i32 0), i64 %elemtmp56)
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @sep_str, i32 0, i32 0))
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @float_fmt, i32 0, i32 0), double %elemtmp55)
  %12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @sep_str, i32 0, i32 0))
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @float_fmt, i32 0, i32 0), double %elemtmp54)
  %14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @sep_str, i32 0, i32 0))
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @float_fmt, i32 0, i32 0), double %elemtmp53)
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @newline_str, i32 0, i32 0))
  br label %ifend

else:                                             ; preds = %if
  br label %ifend

ifend:                                            ; preds = %else, %then
  ret void
}

; Function Attrs: argmemonly norecurse nounwind readonly
define void @consumer(%params* noalias %0) #4 {
entry:
  %tupleptrtmp45 = alloca { double, double, i64, double, double, double }, align 8
  %tupleptrtmp = alloca { double }, align 8
  %hoisted2 = alloca double, align 8
  %hoisted3 = alloca double, align 8
  %found_tup1 = alloca i1, align 1
  %min6 = alloca double, align 8
  %avg_num3 = alloca double, align 8
  %sum5 = alloca double, align 8
  %count4 = alloca i64, align 8
  %tup0 = alloca { double }, align 8
  %cstart8 = alloca i64, align 8
  %count10 = alloca i64, align 8
  %i9 = alloca i64, align 8
  %max7 = alloca double, align 8
  %avg_dem2 = alloca i64, align 8
  store double 1.000000e+02, double* %hoisted2, align 8, !tbaa !3
  store double 3.000000e+00, double* %hoisted3, align 8, !tbaa !3
  store i1 false, i1* %found_tup1, align 1, !tbaa !3
  store i64 0, i64* %avg_dem2, align 8, !tbaa !3
  store double 0.000000e+00, double* %avg_num3, align 8, !tbaa !3
  store i64 0, i64* %count4, align 8, !tbaa !3
  store double 0.000000e+00, double* %sum5, align 8, !tbaa !3
  store double 0x43D0000000000000, double* %min6, align 8, !tbaa !3
  store double 0xC3D0000000000000, double* %max7, align 8, !tbaa !3
  store i64 0, i64* %cstart8, align 8, !tbaa !3
  store i64 0, i64* %i9, align 8, !tbaa !3
  store i64 5, i64* %count10, align 8, !tbaa !3
  br label %loopcond

loopcond:                                         ; preds = %entry
  %i91 = load i64, i64* %i9, align 8, !tbaa !3
  %count102 = load i64, i64* %count10, align 8, !tbaa !3
  %lttmp = icmp slt i64 %i91, %count102
  br i1 %lttmp, label %loopbody, label %loopend

loopbody:                                         ; preds = %loopbody, %loopcond
  %cstart83 = load i64, i64* %cstart8, align 8, !tbaa !3
  %buf = getelementptr inbounds %params, %params* %0, i32 0, i32 0
  %buf_ptr = load [1 x i64]*, [1 x i64]** %buf, align 8, !tbaa !5
  %buf_ptr_cast = bitcast [1 x i64]* %buf_ptr to i8*
  %slice_ptr = getelementptr inbounds i8, i8* %buf_ptr_cast, i64 %cstart83
  %slice_ptr_cast = bitcast i8* %slice_ptr to i16*
  %slice_val = load i16, i16* %slice_ptr_cast, align 2, !tbaa !7
  %int_val = sext i16 %slice_val to i64
  %1 = sitofp i64 %int_val to double
  %hoisted24 = load double, double* %hoisted2, align 8, !tbaa !3
  %divtmp = fdiv double %1, %hoisted24
  %ptrtmp = getelementptr inbounds { double }, { double }* %tupleptrtmp, i32 0, i32 0
  store double %divtmp, double* %ptrtmp, align 8, !tbaa !3
  %tupletmp = load { double }, { double }* %tupleptrtmp, align 8, !tbaa !3
  store { double } %tupletmp, { double }* %tup0, align 8, !tbaa !3
  %avg_num35 = load double, double* %avg_num3, align 8, !tbaa !3
  %tup06 = load { double }, { double }* %tup0, align 8, !tbaa !3
  %elemtmp = extractvalue { double } %tup06, 0
  %addtmp = fadd double %avg_num35, %elemtmp
  store double %addtmp, double* %avg_num3, align 8, !tbaa !3
  %avg_dem27 = load i64, i64* %avg_dem2, align 8, !tbaa !3
  %addtmp8 = add nsw i64 %avg_dem27, 1
  store i64 %addtmp8, i64* %avg_dem2, align 8, !tbaa !3
  %count49 = load i64, i64* %count4, align 8, !tbaa !3
  %addtmp10 = add nsw i64 %count49, 1
  store i64 %addtmp10, i64* %count4, align 8, !tbaa !3
  %sum511 = load double, double* %sum5, align 8, !tbaa !3
  %tup012 = load { double }, { double }* %tup0, align 8, !tbaa !3
  %elemtmp13 = extractvalue { double } %tup012, 0
  %addtmp14 = fadd double %sum511, %elemtmp13
  store double %addtmp14, double* %sum5, align 8, !tbaa !3
  %tup015 = load { double }, { double }* %tup0, align 8, !tbaa !3
  %elemtmp16 = extractvalue { double } %tup015, 0
  %min617 = load double, double* %min6, align 8, !tbaa !3
  %lttmp18 = fcmp olt double %elemtmp16, %min617
  %tup019 = load { double }, { double }* %tup0, align 8, !tbaa !3
  %elemtmp20 = extractvalue { double } %tup019, 0
  %min621 = load double, double* %min6, align 8, !tbaa !3
  %2 = select i1 %lttmp18, double %elemtmp20, double %min621
  store double %2, double* %min6, align 8, !tbaa !3
  %tup022 = load { double }, { double }* %tup0, align 8, !tbaa !3
  %elemtmp23 = extractvalue { double } %tup022, 0
  %max724 = load double, double* %max7, align 8, !tbaa !3
  %lttmp25 = fcmp olt double %elemtmp23, %max724
  %max726 = load double, double* %max7, align 8, !tbaa !3
  %tup027 = load { double }, { double }* %tup0, align 8, !tbaa !3
  %elemtmp28 = extractvalue { double } %tup027, 0
  %3 = select i1 %lttmp25, double %max726, double %elemtmp28
  store double %3, double* %max7, align 8, !tbaa !3
  store i1 true, i1* %found_tup1, align 1, !tbaa !3
  %cstart829 = load i64, i64* %cstart8, align 8, !tbaa !3
  %addtmp30 = add nsw i64 %cstart829, 2
  store i64 %addtmp30, i64* %cstart8, align 8, !tbaa !3
  %i931 = load i64, i64* %i9, align 8, !tbaa !3
  %addtmp32 = add nsw i64 %i931, 1
  store i64 %addtmp32, i64* %i9, align 8, !tbaa !3
  %i933 = load i64, i64* %i9, align 8, !tbaa !3
  %count1034 = load i64, i64* %count10, align 8, !tbaa !3
  %lttmp35 = icmp slt i64 %i933, %count1034
  br i1 %lttmp35, label %loopbody, label %loopend

loopend:                                          ; preds = %loopbody, %loopcond
  br label %if

if:                                               ; preds = %loopend
  %found_tup136 = load i1, i1* %found_tup1, align 1, !tbaa !3
  br i1 %found_tup136, label %then, label %else

then:                                             ; preds = %if
  %hoisted337 = load double, double* %hoisted3, align 8, !tbaa !3
  %avg_num338 = load double, double* %avg_num3, align 8, !tbaa !3
  %avg_dem239 = load i64, i64* %avg_dem2, align 8, !tbaa !3
  %4 = sitofp i64 %avg_dem239 to double
  %divtmp40 = fdiv double %avg_num338, %4
  %count441 = load i64, i64* %count4, align 8, !tbaa !3
  %sum542 = load double, double* %sum5, align 8, !tbaa !3
  %min643 = load double, double* %min6, align 8, !tbaa !3
  %max744 = load double, double* %max7, align 8, !tbaa !3
  %ptrtmp46 = getelementptr inbounds { double, double, i64, double, double, double }, { double, double, i64, double, double, double }* %tupleptrtmp45, i32 0, i32 0
  store double %hoisted337, double* %ptrtmp46, align 8, !tbaa !3
  %ptrtmp47 = getelementptr inbounds { double, double, i64, double, double, double }, { double, double, i64, double, double, double }* %tupleptrtmp45, i32 0, i32 1
  store double %divtmp40, double* %ptrtmp47, align 8, !tbaa !3
  %ptrtmp48 = getelementptr inbounds { double, double, i64, double, double, double }, { double, double, i64, double, double, double }* %tupleptrtmp45, i32 0, i32 2
  store i64 %count441, i64* %ptrtmp48, align 8, !tbaa !3
  %ptrtmp49 = getelementptr inbounds { double, double, i64, double, double, double }, { double, double, i64, double, double, double }* %tupleptrtmp45, i32 0, i32 3
  store double %sum542, double* %ptrtmp49, align 8, !tbaa !3
  %ptrtmp50 = getelementptr inbounds { double, double, i64, double, double, double }, { double, double, i64, double, double, double }* %tupleptrtmp45, i32 0, i32 4
  store double %min643, double* %ptrtmp50, align 8, !tbaa !3
  %ptrtmp51 = getelementptr inbounds { double, double, i64, double, double, double }, { double, double, i64, double, double, double }* %tupleptrtmp45, i32 0, i32 5
  store double %max744, double* %ptrtmp51, align 8, !tbaa !3
  %tupletmp52 = load { double, double, i64, double, double, double }, { double, double, i64, double, double, double }* %tupleptrtmp45, align 8, !tbaa !3
  %elemtmp53 = extractvalue { double, double, i64, double, double, double } %tupletmp52, 5
  %elemtmp54 = extractvalue { double, double, i64, double, double, double } %tupletmp52, 4
  %elemtmp55 = extractvalue { double, double, i64, double, double, double } %tupletmp52, 3
  %elemtmp56 = extractvalue { double, double, i64, double, double, double } %tupletmp52, 2
  %elemtmp57 = extractvalue { double, double, i64, double, double, double } %tupletmp52, 1
  %elemtmp58 = extractvalue { double, double, i64, double, double, double } %tupletmp52, 0
  call void asm sideeffect "", "X,~{memory}"(double %elemtmp58), !tbaa !9
  call void asm sideeffect "", "X,~{memory}"(double %elemtmp57), !tbaa !9
  call void asm sideeffect "", "X,~{memory}"(i64 %elemtmp56), !tbaa !9
  call void asm sideeffect "", "X,~{memory}"(double %elemtmp55), !tbaa !9
  call void asm sideeffect "", "X,~{memory}"(double %elemtmp54), !tbaa !9
  call void asm sideeffect "", "X,~{memory}"(double %elemtmp53), !tbaa !9
  br label %ifend

else:                                             ; preds = %if
  br label %ifend

ifend:                                            ; preds = %else, %then
  ret void
}

define %params* @create(i64* %0) {
entry:
  %malloccall = tail call i8* @malloc(i32 ptrtoint (%params* getelementptr (%params, %params* null, i32 1) to i32))
  %paramstmp = bitcast i8* %malloccall to %params*
  %buf = getelementptr inbounds %params, %params* %paramstmp, i32 0, i32 0
  %tmpbufp = bitcast i64* %0 to [1 x i64]*
  store [1 x i64]* %tmpbufp, [1 x i64]** %buf, align 8
  ret %params* %paramstmp
}

declare noalias i8* @malloc(i32)

attributes #0 = { argmemonly nofree nosync nounwind willreturn }
attributes #1 = { argmemonly readonly speculatable }
attributes #2 = { argmemonly norecurse nounwind readonly speculatable }
attributes #3 = { readnone }
attributes #4 = { argmemonly norecurse nounwind readonly }

!0 = !{!1, !1, i64 0, i64 0}
!1 = !{!"string", !2}
!2 = !{!"castor_root"}
!3 = !{!4, !4, i64 0, i64 0}
!4 = !{!"runtime", !2}
!5 = !{!6, !6, i64 0, i64 1}
!6 = !{!"db", !2}
!7 = !{!8, !8, i64 0, i64 1}
!8 = !{!"db_int", !6}
!9 = !{!10, !10, i64 0, i64 0}
!10 = !{!"consumer", !2}
