; ModuleID = 'scanner'
source_filename = "scanner"

%params = type { [0 x i64]* }

@true_str = private unnamed_addr constant [2 x i8] c"t\00", align 1
@false_str = private unnamed_addr constant [2 x i8] c"f\00", align 1
@null_str = private unnamed_addr constant [5 x i8] c"null\00", align 1
@void_str = private unnamed_addr constant [3 x i8] c"()\00", align 1
@sep_str = private unnamed_addr constant [2 x i8] c"|\00", align 1
@newline_str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@int_fmt = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@str_fmt = private unnamed_addr constant [5 x i8] c"%.*s\00", align 1
@float_fmt = private unnamed_addr constant [3 x i8] c"%f\00", align 1
@date_fmt = private unnamed_addr constant [15 x i8] c"%04d-%02d-%02d\00", align 1
@0 = private unnamed_addr constant [15 x i8] c"this is a test\00", align 1
@1 = private unnamed_addr constant [18 x i8] c"test with, commas\00", align 1
@2 = private unnamed_addr constant [15 x i8] c"this is a test\00", align 1
@3 = private unnamed_addr constant [18 x i8] c"test with, commas\00", align 1

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #0

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #0

; Function Attrs: argmemonly readonly speculatable
declare i32 @cmph_search_packed(i8*, i8*, i32) #1

declare i32 @printf(i8*, ...)

; Function Attrs: argmemonly norecurse nounwind readonly speculatable
declare i32 @strncmp(i8* noalias nocapture, i8* noalias nocapture, i64) #2

declare i8* @strncpy(i8*, i8*, i32)

; Function Attrs: argmemonly norecurse nounwind readonly speculatable
declare i64 @strpos(i8* nocapture, i64, i8* nocapture, i64) #2

; Function Attrs: readnone
declare i64 @extract_year(i64) #3

; Function Attrs: readnone
declare i64 @extract_month(i64) #3

; Function Attrs: readnone
declare i64 @extract_day(i64) #3

; Function Attrs: readnone
declare i64 @add_month(i64, i64) #3

; Function Attrs: readnone
declare i64 @add_year(i64, i64) #3

; Function Attrs: argmemonly norecurse nounwind readonly speculatable
define i1 @scmp({ i8*, i64 } %0, { i8*, i64 } %1) #2 {
entry:
  %len = extractvalue { i8*, i64 } %0, 1
  %pos = extractvalue { i8*, i64 } %0, 0
  %len1 = extractvalue { i8*, i64 } %1, 1
  %pos2 = extractvalue { i8*, i64 } %1, 0
  %len_cmp = icmp eq i64 %len, %len1
  br i1 %len_cmp, label %eq, label %neq

eq:                                               ; preds = %entry
  %str_cmp = call i32 @strncmp(i8* %pos, i8* %pos2, i64 %len), !tbaa !0
  %str_cmp3 = icmp eq i32 %str_cmp, 0
  ret i1 %str_cmp3

neq:                                              ; preds = %entry
  ret i1 false
}

; Function Attrs: argmemonly norecurse nounwind readonly
define void @printer(%params* noalias %0) #4 {
entry:
  %tupleptrtmp = alloca { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 }, align 8
  %str1 = alloca { i8*, i64 }, align 8
  %str = alloca { i8*, i64 }, align 8
  %hoisted0 = alloca i64, align 8
  %hoisted1 = alloca { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 }, align 8
  store i64 8769, i64* %hoisted0, align 8, !tbaa !3
  %str_ptr = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %str, i32 0, i32 0
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @0, i32 0, i32 0), i8** %str_ptr, align 8, !tbaa !3
  %str_len = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %str, i32 0, i32 1
  store i64 14, i64* %str_len, align 8, !tbaa !3
  %strptr = load { i8*, i64 }, { i8*, i64 }* %str, align 8, !tbaa !3
  %str_ptr2 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %str1, i32 0, i32 0
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @1, i32 0, i32 0), i8** %str_ptr2, align 8, !tbaa !3
  %str_len3 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %str1, i32 0, i32 1
  store i64 17, i64* %str_len3, align 8, !tbaa !3
  %strptr4 = load { i8*, i64 }, { i8*, i64 }* %str1, align 8, !tbaa !3
  %hoisted05 = load i64, i64* %hoisted0, align 8, !tbaa !3
  %ptrtmp = getelementptr inbounds { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 }, { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 }* %tupleptrtmp, i32 0, i32 0
  store i64 1, i64* %ptrtmp, align 8, !tbaa !3
  %ptrtmp6 = getelementptr inbounds { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 }, { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 }* %tupleptrtmp, i32 0, i32 1
  store i64 100, i64* %ptrtmp6, align 8, !tbaa !3
  %ptrtmp7 = getelementptr inbounds { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 }, { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 }* %tupleptrtmp, i32 0, i32 2
  store double 1.000000e+00, double* %ptrtmp7, align 8, !tbaa !3
  %ptrtmp8 = getelementptr inbounds { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 }, { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 }* %tupleptrtmp, i32 0, i32 3
  store double 1.000000e-04, double* %ptrtmp8, align 8, !tbaa !3
  %ptrtmp9 = getelementptr inbounds { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 }, { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 }* %tupleptrtmp, i32 0, i32 4
  store double 1.000100e+00, double* %ptrtmp9, align 8, !tbaa !3
  %ptrtmp10 = getelementptr inbounds { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 }, { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 }* %tupleptrtmp, i32 0, i32 5
  store { i8*, i64 } %strptr, { i8*, i64 }* %ptrtmp10, align 8, !tbaa !3
  %ptrtmp11 = getelementptr inbounds { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 }, { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 }* %tupleptrtmp, i32 0, i32 6
  store { i8*, i64 } %strptr4, { i8*, i64 }* %ptrtmp11, align 8, !tbaa !3
  %ptrtmp12 = getelementptr inbounds { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 }, { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 }* %tupleptrtmp, i32 0, i32 7
  store i64 %hoisted05, i64* %ptrtmp12, align 8, !tbaa !3
  %ptrtmp13 = getelementptr inbounds { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 }, { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 }* %tupleptrtmp, i32 0, i32 8
  store i1 true, i1* %ptrtmp13, align 1, !tbaa !3
  %ptrtmp14 = getelementptr inbounds { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 }, { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 }* %tupleptrtmp, i32 0, i32 9
  store i1 false, i1* %ptrtmp14, align 1, !tbaa !3
  %tupletmp = load { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 }, { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 }* %tupleptrtmp, align 8, !tbaa !3
  store { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 } %tupletmp, { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 }* %hoisted1, align 8, !tbaa !3
  %hoisted115 = load { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 }, { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 }* %hoisted1, align 8, !tbaa !3
  %elemtmp = extractvalue { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 } %hoisted115, 9
  %elemtmp16 = extractvalue { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 } %hoisted115, 8
  %elemtmp17 = extractvalue { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 } %hoisted115, 7
  %elemtmp18 = extractvalue { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 } %hoisted115, 6
  %elemtmp19 = extractvalue { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 } %hoisted115, 5
  %elemtmp20 = extractvalue { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 } %hoisted115, 4
  %elemtmp21 = extractvalue { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 } %hoisted115, 3
  %elemtmp22 = extractvalue { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 } %hoisted115, 2
  %elemtmp23 = extractvalue { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 } %hoisted115, 1
  %elemtmp24 = extractvalue { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 } %hoisted115, 0
  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @int_fmt, i32 0, i32 0), i64 %elemtmp24)
  %2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @sep_str, i32 0, i32 0))
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @int_fmt, i32 0, i32 0), i64 %elemtmp23)
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @sep_str, i32 0, i32 0))
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @float_fmt, i32 0, i32 0), double %elemtmp22)
  %6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @sep_str, i32 0, i32 0))
  %7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @float_fmt, i32 0, i32 0), double %elemtmp21)
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @sep_str, i32 0, i32 0))
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @float_fmt, i32 0, i32 0), double %elemtmp20)
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @sep_str, i32 0, i32 0))
  %len = extractvalue { i8*, i64 } %elemtmp19, 1
  %pos = extractvalue { i8*, i64 } %elemtmp19, 0
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str_fmt, i32 0, i32 0), i64 %len, i8* %pos)
  %12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @sep_str, i32 0, i32 0))
  %len25 = extractvalue { i8*, i64 } %elemtmp18, 1
  %pos26 = extractvalue { i8*, i64 } %elemtmp18, 0
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str_fmt, i32 0, i32 0), i64 %len25, i8* %pos26)
  %14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @sep_str, i32 0, i32 0))
  %15 = call i64 @extract_year(i64 %elemtmp17)
  %16 = call i64 @extract_month(i64 %elemtmp17)
  %17 = call i64 @extract_day(i64 %elemtmp17)
  %18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @date_fmt, i32 0, i32 0), i64 %15, i64 %16, i64 %17)
  %19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @sep_str, i32 0, i32 0))
  %20 = select i1 %elemtmp16, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @true_str, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @false_str, i32 0, i32 0)
  %21 = call i32 (i8*, ...) @printf(i8* %20)
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @sep_str, i32 0, i32 0))
  %23 = select i1 %elemtmp, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @true_str, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @false_str, i32 0, i32 0)
  %24 = call i32 (i8*, ...) @printf(i8* %23)
  %25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @newline_str, i32 0, i32 0))
  ret void
}

; Function Attrs: argmemonly norecurse nounwind readonly
define void @consumer(%params* noalias %0) #4 {
entry:
  %tupleptrtmp = alloca { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 }, align 8
  %str1 = alloca { i8*, i64 }, align 8
  %str = alloca { i8*, i64 }, align 8
  %hoisted2 = alloca i64, align 8
  %hoisted3 = alloca { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 }, align 8
  store i64 8769, i64* %hoisted2, align 8, !tbaa !3
  %str_ptr = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %str, i32 0, i32 0
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @2, i32 0, i32 0), i8** %str_ptr, align 8, !tbaa !3
  %str_len = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %str, i32 0, i32 1
  store i64 14, i64* %str_len, align 8, !tbaa !3
  %strptr = load { i8*, i64 }, { i8*, i64 }* %str, align 8, !tbaa !3
  %str_ptr2 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %str1, i32 0, i32 0
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @3, i32 0, i32 0), i8** %str_ptr2, align 8, !tbaa !3
  %str_len3 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %str1, i32 0, i32 1
  store i64 17, i64* %str_len3, align 8, !tbaa !3
  %strptr4 = load { i8*, i64 }, { i8*, i64 }* %str1, align 8, !tbaa !3
  %hoisted25 = load i64, i64* %hoisted2, align 8, !tbaa !3
  %ptrtmp = getelementptr inbounds { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 }, { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 }* %tupleptrtmp, i32 0, i32 0
  store i64 1, i64* %ptrtmp, align 8, !tbaa !3
  %ptrtmp6 = getelementptr inbounds { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 }, { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 }* %tupleptrtmp, i32 0, i32 1
  store i64 100, i64* %ptrtmp6, align 8, !tbaa !3
  %ptrtmp7 = getelementptr inbounds { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 }, { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 }* %tupleptrtmp, i32 0, i32 2
  store double 1.000000e+00, double* %ptrtmp7, align 8, !tbaa !3
  %ptrtmp8 = getelementptr inbounds { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 }, { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 }* %tupleptrtmp, i32 0, i32 3
  store double 1.000000e-04, double* %ptrtmp8, align 8, !tbaa !3
  %ptrtmp9 = getelementptr inbounds { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 }, { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 }* %tupleptrtmp, i32 0, i32 4
  store double 1.000100e+00, double* %ptrtmp9, align 8, !tbaa !3
  %ptrtmp10 = getelementptr inbounds { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 }, { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 }* %tupleptrtmp, i32 0, i32 5
  store { i8*, i64 } %strptr, { i8*, i64 }* %ptrtmp10, align 8, !tbaa !3
  %ptrtmp11 = getelementptr inbounds { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 }, { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 }* %tupleptrtmp, i32 0, i32 6
  store { i8*, i64 } %strptr4, { i8*, i64 }* %ptrtmp11, align 8, !tbaa !3
  %ptrtmp12 = getelementptr inbounds { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 }, { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 }* %tupleptrtmp, i32 0, i32 7
  store i64 %hoisted25, i64* %ptrtmp12, align 8, !tbaa !3
  %ptrtmp13 = getelementptr inbounds { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 }, { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 }* %tupleptrtmp, i32 0, i32 8
  store i1 true, i1* %ptrtmp13, align 1, !tbaa !3
  %ptrtmp14 = getelementptr inbounds { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 }, { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 }* %tupleptrtmp, i32 0, i32 9
  store i1 false, i1* %ptrtmp14, align 1, !tbaa !3
  %tupletmp = load { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 }, { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 }* %tupleptrtmp, align 8, !tbaa !3
  store { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 } %tupletmp, { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 }* %hoisted3, align 8, !tbaa !3
  %hoisted315 = load { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 }, { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 }* %hoisted3, align 8, !tbaa !3
  %elemtmp = extractvalue { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 } %hoisted315, 9
  %elemtmp16 = extractvalue { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 } %hoisted315, 8
  %elemtmp17 = extractvalue { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 } %hoisted315, 7
  %elemtmp18 = extractvalue { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 } %hoisted315, 6
  %elemtmp19 = extractvalue { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 } %hoisted315, 5
  %elemtmp20 = extractvalue { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 } %hoisted315, 4
  %elemtmp21 = extractvalue { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 } %hoisted315, 3
  %elemtmp22 = extractvalue { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 } %hoisted315, 2
  %elemtmp23 = extractvalue { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 } %hoisted315, 1
  %elemtmp24 = extractvalue { i64, i64, double, double, double, { i8*, i64 }, { i8*, i64 }, i64, i1, i1 } %hoisted315, 0
  %len = extractvalue { i8*, i64 } %elemtmp19, 1
  %pos = extractvalue { i8*, i64 } %elemtmp19, 0
  %len25 = extractvalue { i8*, i64 } %elemtmp18, 1
  %pos26 = extractvalue { i8*, i64 } %elemtmp18, 0
  call void asm sideeffect "", "X,~{memory}"(i64 %elemtmp24), !tbaa !5
  call void asm sideeffect "", "X,~{memory}"(i64 %elemtmp23), !tbaa !5
  call void asm sideeffect "", "X,~{memory}"(double %elemtmp22), !tbaa !5
  call void asm sideeffect "", "X,~{memory}"(double %elemtmp21), !tbaa !5
  call void asm sideeffect "", "X,~{memory}"(double %elemtmp20), !tbaa !5
  call void asm sideeffect "", "X,~{memory}"(i8* %pos), !tbaa !5
  call void asm sideeffect "", "X,~{memory}"(i64 %len), !tbaa !5
  call void asm sideeffect "", "X,~{memory}"(i8* %pos26), !tbaa !5
  call void asm sideeffect "", "X,~{memory}"(i64 %len25), !tbaa !5
  call void asm sideeffect "", "X,~{memory}"(i64 %elemtmp17), !tbaa !5
  call void asm sideeffect "", "X,~{memory}"(i1 %elemtmp16), !tbaa !5
  call void asm sideeffect "", "X,~{memory}"(i1 %elemtmp), !tbaa !5
  ret void
}

define %params* @create(i64* %0) {
entry:
  %malloccall = tail call i8* @malloc(i32 ptrtoint (%params* getelementptr (%params, %params* null, i32 1) to i32))
  %paramstmp = bitcast i8* %malloccall to %params*
  %buf = getelementptr inbounds %params, %params* %paramstmp, i32 0, i32 0
  %tmpbufp = bitcast i64* %0 to [0 x i64]*
  store [0 x i64]* %tmpbufp, [0 x i64]** %buf, align 8
  ret %params* %paramstmp
}

declare noalias i8* @malloc(i32)

attributes #0 = { argmemonly nofree nosync nounwind willreturn }
attributes #1 = { argmemonly readonly speculatable }
attributes #2 = { argmemonly norecurse nounwind readonly speculatable }
attributes #3 = { readnone }
attributes #4 = { argmemonly norecurse nounwind readonly }

!0 = !{!1, !1, i64 0, i64 0}
!1 = !{!"string", !2}
!2 = !{!"castor_root"}
!3 = !{!4, !4, i64 0, i64 0}
!4 = !{!"runtime", !2}
!5 = !{!6, !6, i64 0, i64 0}
!6 = !{!"consumer", !2}
