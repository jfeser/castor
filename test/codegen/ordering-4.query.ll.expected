; ModuleID = 'scanner'
source_filename = "scanner"

%params = type { [2 x i64]* }

@true_str = private unnamed_addr constant [2 x i8] c"t\00", align 1
@false_str = private unnamed_addr constant [2 x i8] c"f\00", align 1
@null_str = private unnamed_addr constant [5 x i8] c"null\00", align 1
@void_str = private unnamed_addr constant [3 x i8] c"()\00", align 1
@sep_str = private unnamed_addr constant [2 x i8] c"|\00", align 1
@newline_str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@int_fmt = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@str_fmt = private unnamed_addr constant [5 x i8] c"%.*s\00", align 1
@float_fmt = private unnamed_addr constant [3 x i8] c"%f\00", align 1
@date_fmt = private unnamed_addr constant [15 x i8] c"%04d-%02d-%02d\00", align 1

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #0

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #0

; Function Attrs: argmemonly readonly speculatable
declare i32 @cmph_search_packed(i8*, i8*, i32) #1

declare i32 @printf(i8*, ...)

; Function Attrs: argmemonly norecurse nounwind readonly speculatable
declare i32 @strncmp(i8* noalias nocapture, i8* noalias nocapture, i64) #2

declare i8* @strncpy(i8*, i8*, i32)

; Function Attrs: argmemonly norecurse nounwind readonly speculatable
declare i64 @strpos(i8* nocapture, i64, i8* nocapture, i64) #2

; Function Attrs: readnone
declare i64 @extract_year(i64) #3

; Function Attrs: readnone
declare i64 @extract_month(i64) #3

; Function Attrs: readnone
declare i64 @extract_day(i64) #3

; Function Attrs: readnone
declare i64 @add_month(i64, i64) #3

; Function Attrs: readnone
declare i64 @add_year(i64, i64) #3

; Function Attrs: argmemonly norecurse nounwind readonly speculatable
define i1 @scmp({ i8*, i64 } %0, { i8*, i64 } %1) #2 {
entry:
  %len = extractvalue { i8*, i64 } %0, 1
  %pos = extractvalue { i8*, i64 } %0, 0
  %len1 = extractvalue { i8*, i64 } %1, 1
  %pos2 = extractvalue { i8*, i64 } %1, 0
  %len_cmp = icmp eq i64 %len, %len1
  br i1 %len_cmp, label %eq, label %neq

eq:                                               ; preds = %entry
  %str_cmp = call i32 @strncmp(i8* %pos, i8* %pos2, i64 %len), !tbaa !0
  %str_cmp3 = icmp eq i32 %str_cmp, 0
  ret i1 %str_cmp3

neq:                                              ; preds = %entry
  ret i1 false
}

; Function Attrs: argmemonly norecurse nounwind readonly
define void @printer(%params* noalias %0) #4 {
entry:
  %tupleptrtmp74 = alloca { i64, i64 }, align 8
  %tupleptrtmp42 = alloca { i64, i64 }, align 8
  %tupleptrtmp = alloca { i64, i64 }, align 8
  %cstart7 = alloca i64, align 8
  %cstart12 = alloca i64, align 8
  %i2 = alloca i64, align 8
  %cstart8 = alloca i64, align 8
  %cstart11 = alloca i64, align 8
  %count10 = alloca i64, align 8
  %cstart1 = alloca i64, align 8
  %cstart4 = alloca i64, align 8
  %count3 = alloca i64, align 8
  %i9 = alloca i64, align 8
  %cstart0 = alloca i64, align 8
  %cstart6 = alloca i64, align 8
  %cstart5 = alloca i64, align 8
  store i64 0, i64* %cstart0, align 8, !tbaa !3
  %cstart01 = load i64, i64* %cstart0, align 8, !tbaa !3
  store i64 %cstart01, i64* %cstart1, align 8, !tbaa !3
  store i64 0, i64* %i2, align 8, !tbaa !3
  store i64 5, i64* %count3, align 8, !tbaa !3
  br label %loopcond

loopcond:                                         ; preds = %entry
  %i22 = load i64, i64* %i2, align 8, !tbaa !3
  %count33 = load i64, i64* %count3, align 8, !tbaa !3
  %lttmp = icmp slt i64 %i22, %count33
  br i1 %lttmp, label %loopbody, label %loopend

loopbody:                                         ; preds = %loopbody, %loopcond
  %cstart14 = load i64, i64* %cstart1, align 8, !tbaa !3
  store i64 %cstart14, i64* %cstart4, align 8, !tbaa !3
  %cstart45 = load i64, i64* %cstart4, align 8, !tbaa !3
  %addtmp = add nsw i64 %cstart45, 1
  store i64 %addtmp, i64* %cstart5, align 8, !tbaa !3
  %cstart46 = load i64, i64* %cstart4, align 8, !tbaa !3
  %buf = getelementptr inbounds %params, %params* %0, i32 0, i32 0
  %buf_ptr = load [2 x i64]*, [2 x i64]** %buf, align 8, !tbaa !5
  %buf_ptr_cast = bitcast [2 x i64]* %buf_ptr to i8*
  %slice_ptr = getelementptr inbounds i8, i8* %buf_ptr_cast, i64 %cstart46
  %slice_val = load i8, i8* %slice_ptr, align 1, !tbaa !7
  %int_val = sext i8 %slice_val to i64
  %cstart57 = load i64, i64* %cstart5, align 8, !tbaa !3
  %buf8 = getelementptr inbounds %params, %params* %0, i32 0, i32 0
  %buf_ptr9 = load [2 x i64]*, [2 x i64]** %buf8, align 8, !tbaa !5
  %buf_ptr_cast10 = bitcast [2 x i64]* %buf_ptr9 to i8*
  %slice_ptr11 = getelementptr inbounds i8, i8* %buf_ptr_cast10, i64 %cstart57
  %slice_val12 = load i8, i8* %slice_ptr11, align 1, !tbaa !7
  %int_val13 = sext i8 %slice_val12 to i64
  %ptrtmp = getelementptr inbounds { i64, i64 }, { i64, i64 }* %tupleptrtmp, i32 0, i32 0
  store i64 %int_val, i64* %ptrtmp, align 8, !tbaa !3
  %ptrtmp14 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %tupleptrtmp, i32 0, i32 1
  store i64 %int_val13, i64* %ptrtmp14, align 8, !tbaa !3
  %tupletmp = load { i64, i64 }, { i64, i64 }* %tupleptrtmp, align 8, !tbaa !3
  %elemtmp = extractvalue { i64, i64 } %tupletmp, 1
  %elemtmp15 = extractvalue { i64, i64 } %tupletmp, 0
  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @int_fmt, i32 0, i32 0), i64 %elemtmp15)
  %2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @sep_str, i32 0, i32 0))
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @int_fmt, i32 0, i32 0), i64 %elemtmp)
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @newline_str, i32 0, i32 0))
  %cstart116 = load i64, i64* %cstart1, align 8, !tbaa !3
  %addtmp17 = add nsw i64 %cstart116, 2
  store i64 %addtmp17, i64* %cstart1, align 8, !tbaa !3
  %i218 = load i64, i64* %i2, align 8, !tbaa !3
  %addtmp19 = add nsw i64 %i218, 1
  store i64 %addtmp19, i64* %i2, align 8, !tbaa !3
  %i220 = load i64, i64* %i2, align 8, !tbaa !3
  %count321 = load i64, i64* %count3, align 8, !tbaa !3
  %lttmp22 = icmp slt i64 %i220, %count321
  br i1 %lttmp22, label %loopbody, label %loopend

loopend:                                          ; preds = %loopbody, %loopcond
  %cstart023 = load i64, i64* %cstart0, align 8, !tbaa !3
  %addtmp24 = add nsw i64 %cstart023, 10
  store i64 %addtmp24, i64* %cstart0, align 8, !tbaa !3
  %cstart025 = load i64, i64* %cstart0, align 8, !tbaa !3
  store i64 %cstart025, i64* %cstart6, align 8, !tbaa !3
  %cstart626 = load i64, i64* %cstart6, align 8, !tbaa !3
  %addtmp27 = add nsw i64 %cstart626, 1
  store i64 %addtmp27, i64* %cstart7, align 8, !tbaa !3
  %cstart628 = load i64, i64* %cstart6, align 8, !tbaa !3
  %buf29 = getelementptr inbounds %params, %params* %0, i32 0, i32 0
  %buf_ptr30 = load [2 x i64]*, [2 x i64]** %buf29, align 8, !tbaa !5
  %buf_ptr_cast31 = bitcast [2 x i64]* %buf_ptr30 to i8*
  %slice_ptr32 = getelementptr inbounds i8, i8* %buf_ptr_cast31, i64 %cstart628
  %slice_val33 = load i8, i8* %slice_ptr32, align 1, !tbaa !7
  %int_val34 = sext i8 %slice_val33 to i64
  %cstart735 = load i64, i64* %cstart7, align 8, !tbaa !3
  %buf36 = getelementptr inbounds %params, %params* %0, i32 0, i32 0
  %buf_ptr37 = load [2 x i64]*, [2 x i64]** %buf36, align 8, !tbaa !5
  %buf_ptr_cast38 = bitcast [2 x i64]* %buf_ptr37 to i8*
  %slice_ptr39 = getelementptr inbounds i8, i8* %buf_ptr_cast38, i64 %cstart735
  %slice_val40 = load i8, i8* %slice_ptr39, align 1, !tbaa !7
  %int_val41 = sext i8 %slice_val40 to i64
  %ptrtmp43 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %tupleptrtmp42, i32 0, i32 0
  store i64 %int_val34, i64* %ptrtmp43, align 8, !tbaa !3
  %ptrtmp44 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %tupleptrtmp42, i32 0, i32 1
  store i64 %int_val41, i64* %ptrtmp44, align 8, !tbaa !3
  %tupletmp45 = load { i64, i64 }, { i64, i64 }* %tupleptrtmp42, align 8, !tbaa !3
  %elemtmp46 = extractvalue { i64, i64 } %tupletmp45, 1
  %elemtmp47 = extractvalue { i64, i64 } %tupletmp45, 0
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @int_fmt, i32 0, i32 0), i64 %elemtmp47)
  %6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @sep_str, i32 0, i32 0))
  %7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @int_fmt, i32 0, i32 0), i64 %elemtmp46)
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @newline_str, i32 0, i32 0))
  %cstart048 = load i64, i64* %cstart0, align 8, !tbaa !3
  %addtmp49 = add nsw i64 %cstart048, 2
  store i64 %addtmp49, i64* %cstart0, align 8, !tbaa !3
  %cstart050 = load i64, i64* %cstart0, align 8, !tbaa !3
  store i64 %cstart050, i64* %cstart8, align 8, !tbaa !3
  store i64 0, i64* %i9, align 8, !tbaa !3
  store i64 5, i64* %count10, align 8, !tbaa !3
  br label %loopcond51

loopcond51:                                       ; preds = %loopend
  %i954 = load i64, i64* %i9, align 8, !tbaa !3
  %count1055 = load i64, i64* %count10, align 8, !tbaa !3
  %lttmp56 = icmp slt i64 %i954, %count1055
  br i1 %lttmp56, label %loopbody52, label %loopend53

loopbody52:                                       ; preds = %loopbody52, %loopcond51
  %cstart857 = load i64, i64* %cstart8, align 8, !tbaa !3
  store i64 %cstart857, i64* %cstart11, align 8, !tbaa !3
  %cstart1158 = load i64, i64* %cstart11, align 8, !tbaa !3
  %addtmp59 = add nsw i64 %cstart1158, 1
  store i64 %addtmp59, i64* %cstart12, align 8, !tbaa !3
  %cstart1160 = load i64, i64* %cstart11, align 8, !tbaa !3
  %buf61 = getelementptr inbounds %params, %params* %0, i32 0, i32 0
  %buf_ptr62 = load [2 x i64]*, [2 x i64]** %buf61, align 8, !tbaa !5
  %buf_ptr_cast63 = bitcast [2 x i64]* %buf_ptr62 to i8*
  %slice_ptr64 = getelementptr inbounds i8, i8* %buf_ptr_cast63, i64 %cstart1160
  %slice_val65 = load i8, i8* %slice_ptr64, align 1, !tbaa !7
  %int_val66 = sext i8 %slice_val65 to i64
  %cstart1267 = load i64, i64* %cstart12, align 8, !tbaa !3
  %buf68 = getelementptr inbounds %params, %params* %0, i32 0, i32 0
  %buf_ptr69 = load [2 x i64]*, [2 x i64]** %buf68, align 8, !tbaa !5
  %buf_ptr_cast70 = bitcast [2 x i64]* %buf_ptr69 to i8*
  %slice_ptr71 = getelementptr inbounds i8, i8* %buf_ptr_cast70, i64 %cstart1267
  %slice_val72 = load i8, i8* %slice_ptr71, align 1, !tbaa !7
  %int_val73 = sext i8 %slice_val72 to i64
  %ptrtmp75 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %tupleptrtmp74, i32 0, i32 0
  store i64 %int_val66, i64* %ptrtmp75, align 8, !tbaa !3
  %ptrtmp76 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %tupleptrtmp74, i32 0, i32 1
  store i64 %int_val73, i64* %ptrtmp76, align 8, !tbaa !3
  %tupletmp77 = load { i64, i64 }, { i64, i64 }* %tupleptrtmp74, align 8, !tbaa !3
  %elemtmp78 = extractvalue { i64, i64 } %tupletmp77, 1
  %elemtmp79 = extractvalue { i64, i64 } %tupletmp77, 0
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @int_fmt, i32 0, i32 0), i64 %elemtmp79)
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @sep_str, i32 0, i32 0))
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @int_fmt, i32 0, i32 0), i64 %elemtmp78)
  %12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @newline_str, i32 0, i32 0))
  %cstart880 = load i64, i64* %cstart8, align 8, !tbaa !3
  %addtmp81 = add nsw i64 %cstart880, 2
  store i64 %addtmp81, i64* %cstart8, align 8, !tbaa !3
  %i982 = load i64, i64* %i9, align 8, !tbaa !3
  %addtmp83 = add nsw i64 %i982, 1
  store i64 %addtmp83, i64* %i9, align 8, !tbaa !3
  %i984 = load i64, i64* %i9, align 8, !tbaa !3
  %count1085 = load i64, i64* %count10, align 8, !tbaa !3
  %lttmp86 = icmp slt i64 %i984, %count1085
  br i1 %lttmp86, label %loopbody52, label %loopend53

loopend53:                                        ; preds = %loopbody52, %loopcond51
  %cstart087 = load i64, i64* %cstart0, align 8, !tbaa !3
  %addtmp88 = add nsw i64 %cstart087, 10
  store i64 %addtmp88, i64* %cstart0, align 8, !tbaa !3
  ret void
}

; Function Attrs: argmemonly norecurse nounwind readonly
define void @consumer(%params* noalias %0) #4 {
entry:
  %tupleptrtmp74 = alloca { i64, i64 }, align 8
  %tupleptrtmp42 = alloca { i64, i64 }, align 8
  %tupleptrtmp = alloca { i64, i64 }, align 8
  %cstart7 = alloca i64, align 8
  %cstart12 = alloca i64, align 8
  %i2 = alloca i64, align 8
  %cstart8 = alloca i64, align 8
  %cstart11 = alloca i64, align 8
  %count10 = alloca i64, align 8
  %cstart1 = alloca i64, align 8
  %cstart4 = alloca i64, align 8
  %count3 = alloca i64, align 8
  %i9 = alloca i64, align 8
  %cstart0 = alloca i64, align 8
  %cstart6 = alloca i64, align 8
  %cstart5 = alloca i64, align 8
  store i64 0, i64* %cstart0, align 8, !tbaa !3
  %cstart01 = load i64, i64* %cstart0, align 8, !tbaa !3
  store i64 %cstart01, i64* %cstart1, align 8, !tbaa !3
  store i64 0, i64* %i2, align 8, !tbaa !3
  store i64 5, i64* %count3, align 8, !tbaa !3
  br label %loopcond

loopcond:                                         ; preds = %entry
  %i22 = load i64, i64* %i2, align 8, !tbaa !3
  %count33 = load i64, i64* %count3, align 8, !tbaa !3
  %lttmp = icmp slt i64 %i22, %count33
  br i1 %lttmp, label %loopbody, label %loopend

loopbody:                                         ; preds = %loopbody, %loopcond
  %cstart14 = load i64, i64* %cstart1, align 8, !tbaa !3
  store i64 %cstart14, i64* %cstart4, align 8, !tbaa !3
  %cstart45 = load i64, i64* %cstart4, align 8, !tbaa !3
  %addtmp = add nsw i64 %cstart45, 1
  store i64 %addtmp, i64* %cstart5, align 8, !tbaa !3
  %cstart46 = load i64, i64* %cstart4, align 8, !tbaa !3
  %buf = getelementptr inbounds %params, %params* %0, i32 0, i32 0
  %buf_ptr = load [2 x i64]*, [2 x i64]** %buf, align 8, !tbaa !5
  %buf_ptr_cast = bitcast [2 x i64]* %buf_ptr to i8*
  %slice_ptr = getelementptr inbounds i8, i8* %buf_ptr_cast, i64 %cstart46
  %slice_val = load i8, i8* %slice_ptr, align 1, !tbaa !7
  %int_val = sext i8 %slice_val to i64
  %cstart57 = load i64, i64* %cstart5, align 8, !tbaa !3
  %buf8 = getelementptr inbounds %params, %params* %0, i32 0, i32 0
  %buf_ptr9 = load [2 x i64]*, [2 x i64]** %buf8, align 8, !tbaa !5
  %buf_ptr_cast10 = bitcast [2 x i64]* %buf_ptr9 to i8*
  %slice_ptr11 = getelementptr inbounds i8, i8* %buf_ptr_cast10, i64 %cstart57
  %slice_val12 = load i8, i8* %slice_ptr11, align 1, !tbaa !7
  %int_val13 = sext i8 %slice_val12 to i64
  %ptrtmp = getelementptr inbounds { i64, i64 }, { i64, i64 }* %tupleptrtmp, i32 0, i32 0
  store i64 %int_val, i64* %ptrtmp, align 8, !tbaa !3
  %ptrtmp14 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %tupleptrtmp, i32 0, i32 1
  store i64 %int_val13, i64* %ptrtmp14, align 8, !tbaa !3
  %tupletmp = load { i64, i64 }, { i64, i64 }* %tupleptrtmp, align 8, !tbaa !3
  %elemtmp = extractvalue { i64, i64 } %tupletmp, 1
  %elemtmp15 = extractvalue { i64, i64 } %tupletmp, 0
  call void asm sideeffect "", "X,~{memory}"(i64 %elemtmp15), !tbaa !9
  call void asm sideeffect "", "X,~{memory}"(i64 %elemtmp), !tbaa !9
  %cstart116 = load i64, i64* %cstart1, align 8, !tbaa !3
  %addtmp17 = add nsw i64 %cstart116, 2
  store i64 %addtmp17, i64* %cstart1, align 8, !tbaa !3
  %i218 = load i64, i64* %i2, align 8, !tbaa !3
  %addtmp19 = add nsw i64 %i218, 1
  store i64 %addtmp19, i64* %i2, align 8, !tbaa !3
  %i220 = load i64, i64* %i2, align 8, !tbaa !3
  %count321 = load i64, i64* %count3, align 8, !tbaa !3
  %lttmp22 = icmp slt i64 %i220, %count321
  br i1 %lttmp22, label %loopbody, label %loopend

loopend:                                          ; preds = %loopbody, %loopcond
  %cstart023 = load i64, i64* %cstart0, align 8, !tbaa !3
  %addtmp24 = add nsw i64 %cstart023, 10
  store i64 %addtmp24, i64* %cstart0, align 8, !tbaa !3
  %cstart025 = load i64, i64* %cstart0, align 8, !tbaa !3
  store i64 %cstart025, i64* %cstart6, align 8, !tbaa !3
  %cstart626 = load i64, i64* %cstart6, align 8, !tbaa !3
  %addtmp27 = add nsw i64 %cstart626, 1
  store i64 %addtmp27, i64* %cstart7, align 8, !tbaa !3
  %cstart628 = load i64, i64* %cstart6, align 8, !tbaa !3
  %buf29 = getelementptr inbounds %params, %params* %0, i32 0, i32 0
  %buf_ptr30 = load [2 x i64]*, [2 x i64]** %buf29, align 8, !tbaa !5
  %buf_ptr_cast31 = bitcast [2 x i64]* %buf_ptr30 to i8*
  %slice_ptr32 = getelementptr inbounds i8, i8* %buf_ptr_cast31, i64 %cstart628
  %slice_val33 = load i8, i8* %slice_ptr32, align 1, !tbaa !7
  %int_val34 = sext i8 %slice_val33 to i64
  %cstart735 = load i64, i64* %cstart7, align 8, !tbaa !3
  %buf36 = getelementptr inbounds %params, %params* %0, i32 0, i32 0
  %buf_ptr37 = load [2 x i64]*, [2 x i64]** %buf36, align 8, !tbaa !5
  %buf_ptr_cast38 = bitcast [2 x i64]* %buf_ptr37 to i8*
  %slice_ptr39 = getelementptr inbounds i8, i8* %buf_ptr_cast38, i64 %cstart735
  %slice_val40 = load i8, i8* %slice_ptr39, align 1, !tbaa !7
  %int_val41 = sext i8 %slice_val40 to i64
  %ptrtmp43 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %tupleptrtmp42, i32 0, i32 0
  store i64 %int_val34, i64* %ptrtmp43, align 8, !tbaa !3
  %ptrtmp44 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %tupleptrtmp42, i32 0, i32 1
  store i64 %int_val41, i64* %ptrtmp44, align 8, !tbaa !3
  %tupletmp45 = load { i64, i64 }, { i64, i64 }* %tupleptrtmp42, align 8, !tbaa !3
  %elemtmp46 = extractvalue { i64, i64 } %tupletmp45, 1
  %elemtmp47 = extractvalue { i64, i64 } %tupletmp45, 0
  call void asm sideeffect "", "X,~{memory}"(i64 %elemtmp47), !tbaa !9
  call void asm sideeffect "", "X,~{memory}"(i64 %elemtmp46), !tbaa !9
  %cstart048 = load i64, i64* %cstart0, align 8, !tbaa !3
  %addtmp49 = add nsw i64 %cstart048, 2
  store i64 %addtmp49, i64* %cstart0, align 8, !tbaa !3
  %cstart050 = load i64, i64* %cstart0, align 8, !tbaa !3
  store i64 %cstart050, i64* %cstart8, align 8, !tbaa !3
  store i64 0, i64* %i9, align 8, !tbaa !3
  store i64 5, i64* %count10, align 8, !tbaa !3
  br label %loopcond51

loopcond51:                                       ; preds = %loopend
  %i954 = load i64, i64* %i9, align 8, !tbaa !3
  %count1055 = load i64, i64* %count10, align 8, !tbaa !3
  %lttmp56 = icmp slt i64 %i954, %count1055
  br i1 %lttmp56, label %loopbody52, label %loopend53

loopbody52:                                       ; preds = %loopbody52, %loopcond51
  %cstart857 = load i64, i64* %cstart8, align 8, !tbaa !3
  store i64 %cstart857, i64* %cstart11, align 8, !tbaa !3
  %cstart1158 = load i64, i64* %cstart11, align 8, !tbaa !3
  %addtmp59 = add nsw i64 %cstart1158, 1
  store i64 %addtmp59, i64* %cstart12, align 8, !tbaa !3
  %cstart1160 = load i64, i64* %cstart11, align 8, !tbaa !3
  %buf61 = getelementptr inbounds %params, %params* %0, i32 0, i32 0
  %buf_ptr62 = load [2 x i64]*, [2 x i64]** %buf61, align 8, !tbaa !5
  %buf_ptr_cast63 = bitcast [2 x i64]* %buf_ptr62 to i8*
  %slice_ptr64 = getelementptr inbounds i8, i8* %buf_ptr_cast63, i64 %cstart1160
  %slice_val65 = load i8, i8* %slice_ptr64, align 1, !tbaa !7
  %int_val66 = sext i8 %slice_val65 to i64
  %cstart1267 = load i64, i64* %cstart12, align 8, !tbaa !3
  %buf68 = getelementptr inbounds %params, %params* %0, i32 0, i32 0
  %buf_ptr69 = load [2 x i64]*, [2 x i64]** %buf68, align 8, !tbaa !5
  %buf_ptr_cast70 = bitcast [2 x i64]* %buf_ptr69 to i8*
  %slice_ptr71 = getelementptr inbounds i8, i8* %buf_ptr_cast70, i64 %cstart1267
  %slice_val72 = load i8, i8* %slice_ptr71, align 1, !tbaa !7
  %int_val73 = sext i8 %slice_val72 to i64
  %ptrtmp75 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %tupleptrtmp74, i32 0, i32 0
  store i64 %int_val66, i64* %ptrtmp75, align 8, !tbaa !3
  %ptrtmp76 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %tupleptrtmp74, i32 0, i32 1
  store i64 %int_val73, i64* %ptrtmp76, align 8, !tbaa !3
  %tupletmp77 = load { i64, i64 }, { i64, i64 }* %tupleptrtmp74, align 8, !tbaa !3
  %elemtmp78 = extractvalue { i64, i64 } %tupletmp77, 1
  %elemtmp79 = extractvalue { i64, i64 } %tupletmp77, 0
  call void asm sideeffect "", "X,~{memory}"(i64 %elemtmp79), !tbaa !9
  call void asm sideeffect "", "X,~{memory}"(i64 %elemtmp78), !tbaa !9
  %cstart880 = load i64, i64* %cstart8, align 8, !tbaa !3
  %addtmp81 = add nsw i64 %cstart880, 2
  store i64 %addtmp81, i64* %cstart8, align 8, !tbaa !3
  %i982 = load i64, i64* %i9, align 8, !tbaa !3
  %addtmp83 = add nsw i64 %i982, 1
  store i64 %addtmp83, i64* %i9, align 8, !tbaa !3
  %i984 = load i64, i64* %i9, align 8, !tbaa !3
  %count1085 = load i64, i64* %count10, align 8, !tbaa !3
  %lttmp86 = icmp slt i64 %i984, %count1085
  br i1 %lttmp86, label %loopbody52, label %loopend53

loopend53:                                        ; preds = %loopbody52, %loopcond51
  %cstart087 = load i64, i64* %cstart0, align 8, !tbaa !3
  %addtmp88 = add nsw i64 %cstart087, 10
  store i64 %addtmp88, i64* %cstart0, align 8, !tbaa !3
  ret void
}

define %params* @create(i64* %0) {
entry:
  %malloccall = tail call i8* @malloc(i32 ptrtoint (%params* getelementptr (%params, %params* null, i32 1) to i32))
  %paramstmp = bitcast i8* %malloccall to %params*
  %buf = getelementptr inbounds %params, %params* %paramstmp, i32 0, i32 0
  %tmpbufp = bitcast i64* %0 to [2 x i64]*
  store [2 x i64]* %tmpbufp, [2 x i64]** %buf, align 8
  ret %params* %paramstmp
}

declare noalias i8* @malloc(i32)

attributes #0 = { argmemonly nofree nosync nounwind willreturn }
attributes #1 = { argmemonly readonly speculatable }
attributes #2 = { argmemonly norecurse nounwind readonly speculatable }
attributes #3 = { readnone }
attributes #4 = { argmemonly norecurse nounwind readonly }

!0 = !{!1, !1, i64 0, i64 0}
!1 = !{!"string", !2}
!2 = !{!"castor_root"}
!3 = !{!4, !4, i64 0, i64 0}
!4 = !{!"runtime", !2}
!5 = !{!6, !6, i64 0, i64 1}
!6 = !{!"db", !2}
!7 = !{!8, !8, i64 0, i64 1}
!8 = !{!"db_int", !6}
!9 = !{!10, !10, i64 0, i64 0}
!10 = !{!"consumer", !2}
