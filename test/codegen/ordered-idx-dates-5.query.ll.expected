; ModuleID = 'scanner'
source_filename = "scanner"

%params = type { [3 x i64]* }

@true_str = private unnamed_addr constant [2 x i8] c"t\00", align 1
@false_str = private unnamed_addr constant [2 x i8] c"f\00", align 1
@null_str = private unnamed_addr constant [5 x i8] c"null\00", align 1
@void_str = private unnamed_addr constant [3 x i8] c"()\00", align 1
@sep_str = private unnamed_addr constant [2 x i8] c"|\00", align 1
@newline_str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@int_fmt = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@str_fmt = private unnamed_addr constant [5 x i8] c"%.*s\00", align 1
@float_fmt = private unnamed_addr constant [3 x i8] c"%f\00", align 1
@date_fmt = private unnamed_addr constant [15 x i8] c"%04d-%02d-%02d\00", align 1

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #0

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #0

; Function Attrs: argmemonly readonly speculatable
declare i32 @cmph_search_packed(i8*, i8*, i32) #1

declare i32 @printf(i8*, ...)

; Function Attrs: argmemonly norecurse nounwind readonly speculatable
declare i32 @strncmp(i8* noalias nocapture, i8* noalias nocapture, i64) #2

declare i8* @strncpy(i8*, i8*, i32)

; Function Attrs: argmemonly norecurse nounwind readonly speculatable
declare i64 @strpos(i8* nocapture, i64, i8* nocapture, i64) #2

; Function Attrs: readnone
declare i64 @extract_year(i64) #3

; Function Attrs: readnone
declare i64 @extract_month(i64) #3

; Function Attrs: readnone
declare i64 @extract_day(i64) #3

; Function Attrs: readnone
declare i64 @add_month(i64, i64) #3

; Function Attrs: readnone
declare i64 @add_year(i64, i64) #3

; Function Attrs: argmemonly norecurse nounwind readonly speculatable
define i1 @scmp({ i8*, i64 } %0, { i8*, i64 } %1) #2 {
entry:
  %len = extractvalue { i8*, i64 } %0, 1
  %pos = extractvalue { i8*, i64 } %0, 0
  %len1 = extractvalue { i8*, i64 } %1, 1
  %pos2 = extractvalue { i8*, i64 } %1, 0
  %len_cmp = icmp eq i64 %len, %len1
  br i1 %len_cmp, label %eq, label %neq

eq:                                               ; preds = %entry
  %str_cmp = call i32 @strncmp(i8* %pos, i8* %pos2, i64 %len), !tbaa !0
  %str_cmp3 = icmp eq i32 %str_cmp, 0
  ret i1 %str_cmp3

neq:                                              ; preds = %entry
  ret i1 false
}

; Function Attrs: argmemonly norecurse nounwind readonly
define void @printer(%params* noalias %0) #4 {
entry:
  %tupleptrtmp125 = alloca { i64 }, align 8
  %tupleptrtmp106 = alloca { i64, i64 }, align 8
  %tupleptrtmp47 = alloca { i64 }, align 8
  %tupleptrtmp = alloca { i64 }, align 8
  %hoisted0 = alloca i64, align 8
  %hoisted1 = alloca i64, align 8
  %hoisted2 = alloca i64, align 8
  %hoisted3 = alloca i64, align 8
  %hoisted4 = alloca i64, align 8
  %hoisted5 = alloca i64, align 8
  %hoisted6 = alloca i64, align 8
  %hoisted7 = alloca i64, align 8
  %hoisted8 = alloca i64, align 8
  %hoisted9 = alloca i64, align 8
  %hoisted10 = alloca i64, align 8
  %hoisted11 = alloca i64, align 8
  %hoisted12 = alloca i64, align 8
  %hoisted13 = alloca i64, align 8
  %hoisted14 = alloca i64, align 8
  %mid5 = alloca i64, align 8
  %key10 = alloca { i64 }, align 8
  %key9 = alloca { i64 }, align 8
  %high4 = alloca i64, align 8
  %kstart0 = alloca i64, align 8
  %key6 = alloca { i64 }, align 8
  %idx7 = alloca i64, align 8
  %vstart1 = alloca i64, align 8
  %key2 = alloca { i64 }, align 8
  %key8 = alloca { i64 }, align 8
  %low3 = alloca i64, align 8
  store i64 5, i64* %hoisted0, align 8, !tbaa !3
  store i64 17444, i64* %hoisted1, align 8, !tbaa !3
  %hoisted15 = load i64, i64* %hoisted1, align 8, !tbaa !3
  store i64 %hoisted15, i64* %hoisted2, align 8, !tbaa !3
  store i64 5, i64* %hoisted3, align 8, !tbaa !3
  store i64 17775, i64* %hoisted4, align 8, !tbaa !3
  %hoisted46 = load i64, i64* %hoisted4, align 8, !tbaa !3
  store i64 %hoisted46, i64* %hoisted5, align 8, !tbaa !3
  store i64 17775, i64* %hoisted6, align 8, !tbaa !3
  %hoisted67 = load i64, i64* %hoisted6, align 8, !tbaa !3
  store i64 %hoisted67, i64* %hoisted7, align 8, !tbaa !3
  store i64 5, i64* %hoisted8, align 8, !tbaa !3
  store i64 17775, i64* %hoisted9, align 8, !tbaa !3
  %hoisted98 = load i64, i64* %hoisted9, align 8, !tbaa !3
  store i64 %hoisted98, i64* %hoisted10, align 8, !tbaa !3
  store i64 17775, i64* %hoisted11, align 8, !tbaa !3
  %hoisted119 = load i64, i64* %hoisted11, align 8, !tbaa !3
  store i64 %hoisted119, i64* %hoisted12, align 8, !tbaa !3
  store i64 17444, i64* %hoisted13, align 8, !tbaa !3
  %hoisted1310 = load i64, i64* %hoisted13, align 8, !tbaa !3
  store i64 %hoisted1310, i64* %hoisted14, align 8, !tbaa !3
  store i64 0, i64* %low3, align 8, !tbaa !3
  %hoisted011 = load i64, i64* %hoisted0, align 8, !tbaa !3
  store i64 %hoisted011, i64* %high4, align 8, !tbaa !3
  br label %loopcond

loopcond:                                         ; preds = %entry
  %low312 = load i64, i64* %low3, align 8, !tbaa !3
  %high413 = load i64, i64* %high4, align 8, !tbaa !3
  %lttmp = icmp slt i64 %low312, %high413
  br i1 %lttmp, label %loopbody, label %loopend

loopbody:                                         ; preds = %ifend, %loopcond
  %low314 = load i64, i64* %low3, align 8, !tbaa !3
  %high415 = load i64, i64* %high4, align 8, !tbaa !3
  %addtmp = add nsw i64 %low314, %high415
  %divtmp = sdiv i64 %addtmp, 2
  store i64 %divtmp, i64* %mid5, align 8, !tbaa !3
  %mid516 = load i64, i64* %mid5, align 8, !tbaa !3
  %multmp = mul nsw i64 %mid516, 3
  %addtmp17 = add nsw i64 0, %multmp
  store i64 %addtmp17, i64* %kstart0, align 8, !tbaa !3
  %kstart018 = load i64, i64* %kstart0, align 8, !tbaa !3
  %buf = getelementptr inbounds %params, %params* %0, i32 0, i32 0
  %buf_ptr = load [3 x i64]*, [3 x i64]** %buf, align 8, !tbaa !5
  %buf_ptr_cast = bitcast [3 x i64]* %buf_ptr to i8*
  %slice_ptr = getelementptr inbounds i8, i8* %buf_ptr_cast, i64 %kstart018
  %slice_ptr_cast = bitcast i8* %slice_ptr to i16*
  %slice_val = load i16, i16* %slice_ptr_cast, align 2, !tbaa !7
  %int_val = sext i16 %slice_val to i64
  %ptrtmp = getelementptr inbounds { i64 }, { i64 }* %tupleptrtmp, i32 0, i32 0
  store i64 %int_val, i64* %ptrtmp, align 8, !tbaa !3
  %tupletmp = load { i64 }, { i64 }* %tupleptrtmp, align 8, !tbaa !3
  store { i64 } %tupletmp, { i64 }* %key6, align 8, !tbaa !3
  br label %if

loopend:                                          ; preds = %ifend, %loopcond
  %low328 = load i64, i64* %low3, align 8, !tbaa !3
  store i64 %low328, i64* %idx7, align 8, !tbaa !3
  br label %if29

if:                                               ; preds = %loopbody
  %key619 = load { i64 }, { i64 }* %key6, align 8, !tbaa !3
  %elemtmp = extractvalue { i64 } %key619, 0
  %hoisted220 = load i64, i64* %hoisted2, align 8, !tbaa !3
  %lttmp21 = icmp slt i64 %elemtmp, %hoisted220
  %nottmp = xor i1 %lttmp21, true
  br i1 %nottmp, label %then, label %else

then:                                             ; preds = %if
  %mid522 = load i64, i64* %mid5, align 8, !tbaa !3
  store i64 %mid522, i64* %high4, align 8, !tbaa !3
  br label %ifend

else:                                             ; preds = %if
  %mid523 = load i64, i64* %mid5, align 8, !tbaa !3
  %addtmp24 = add nsw i64 %mid523, 1
  store i64 %addtmp24, i64* %low3, align 8, !tbaa !3
  br label %ifend

ifend:                                            ; preds = %else, %then
  %low325 = load i64, i64* %low3, align 8, !tbaa !3
  %high426 = load i64, i64* %high4, align 8, !tbaa !3
  %lttmp27 = icmp slt i64 %low325, %high426
  br i1 %lttmp27, label %loopbody, label %loopend

if29:                                             ; preds = %loopend
  %idx733 = load i64, i64* %idx7, align 8, !tbaa !3
  %hoisted334 = load i64, i64* %hoisted3, align 8, !tbaa !3
  %lttmp35 = icmp slt i64 %idx733, %hoisted334
  br i1 %lttmp35, label %then30, label %else31

then30:                                           ; preds = %if29
  %idx736 = load i64, i64* %idx7, align 8, !tbaa !3
  %multmp37 = mul nsw i64 %idx736, 3
  %addtmp38 = add nsw i64 0, %multmp37
  store i64 %addtmp38, i64* %kstart0, align 8, !tbaa !3
  %kstart039 = load i64, i64* %kstart0, align 8, !tbaa !3
  %buf40 = getelementptr inbounds %params, %params* %0, i32 0, i32 0
  %buf_ptr41 = load [3 x i64]*, [3 x i64]** %buf40, align 8, !tbaa !5
  %buf_ptr_cast42 = bitcast [3 x i64]* %buf_ptr41 to i8*
  %slice_ptr43 = getelementptr inbounds i8, i8* %buf_ptr_cast42, i64 %kstart039
  %slice_ptr_cast44 = bitcast i8* %slice_ptr43 to i16*
  %slice_val45 = load i16, i16* %slice_ptr_cast44, align 2, !tbaa !7
  %int_val46 = sext i16 %slice_val45 to i64
  %ptrtmp48 = getelementptr inbounds { i64 }, { i64 }* %tupleptrtmp47, i32 0, i32 0
  store i64 %int_val46, i64* %ptrtmp48, align 8, !tbaa !3
  %tupletmp49 = load { i64 }, { i64 }* %tupleptrtmp47, align 8, !tbaa !3
  store { i64 } %tupletmp49, { i64 }* %key8, align 8, !tbaa !3
  %key850 = load { i64 }, { i64 }* %key8, align 8, !tbaa !3
  store { i64 } %key850, { i64 }* %key9, align 8, !tbaa !3
  br label %loopcond51

else31:                                           ; preds = %if29
  br label %ifend32

ifend32:                                          ; preds = %else31, %loopend53
  ret void

loopcond51:                                       ; preds = %then30
  %key954 = load { i64 }, { i64 }* %key9, align 8, !tbaa !3
  %elemtmp55 = extractvalue { i64 } %key954, 0
  %hoisted556 = load i64, i64* %hoisted5, align 8, !tbaa !3
  %lttmp57 = icmp slt i64 %elemtmp55, %hoisted556
  %key958 = load { i64 }, { i64 }* %key9, align 8, !tbaa !3
  %elemtmp59 = extractvalue { i64 } %key958, 0
  %hoisted760 = load i64, i64* %hoisted7, align 8, !tbaa !3
  %eqtmp = icmp eq i64 %elemtmp59, %hoisted760
  %ortmp = or i1 %lttmp57, %eqtmp
  %idx761 = load i64, i64* %idx7, align 8, !tbaa !3
  %hoisted862 = load i64, i64* %hoisted8, align 8, !tbaa !3
  %lttmp63 = icmp slt i64 %idx761, %hoisted862
  %andtmp = and i1 %ortmp, %lttmp63
  br i1 %andtmp, label %loopbody52, label %loopend53

loopbody52:                                       ; preds = %ifend67, %loopcond51
  br label %if64

loopend53:                                        ; preds = %ifend67, %loopcond51
  br label %ifend32

if64:                                             ; preds = %loopbody52
  %key968 = load { i64 }, { i64 }* %key9, align 8, !tbaa !3
  %elemtmp69 = extractvalue { i64 } %key968, 0
  %hoisted1070 = load i64, i64* %hoisted10, align 8, !tbaa !3
  %lttmp71 = icmp slt i64 %elemtmp69, %hoisted1070
  %key972 = load { i64 }, { i64 }* %key9, align 8, !tbaa !3
  %elemtmp73 = extractvalue { i64 } %key972, 0
  %hoisted1274 = load i64, i64* %hoisted12, align 8, !tbaa !3
  %eqtmp75 = icmp eq i64 %elemtmp73, %hoisted1274
  %ortmp76 = or i1 %lttmp71, %eqtmp75
  %key977 = load { i64 }, { i64 }* %key9, align 8, !tbaa !3
  %elemtmp78 = extractvalue { i64 } %key977, 0
  %hoisted1479 = load i64, i64* %hoisted14, align 8, !tbaa !3
  %lttmp80 = icmp slt i64 %elemtmp78, %hoisted1479
  %nottmp81 = xor i1 %lttmp80, true
  %andtmp82 = and i1 %ortmp76, %nottmp81
  br i1 %andtmp82, label %then65, label %else66

then65:                                           ; preds = %if64
  %idx783 = load i64, i64* %idx7, align 8, !tbaa !3
  %multmp84 = mul nsw i64 %idx783, 3
  %addtmp85 = add nsw i64 0, %multmp84
  %addtmp86 = add nsw i64 %addtmp85, 2
  %buf87 = getelementptr inbounds %params, %params* %0, i32 0, i32 0
  %buf_ptr88 = load [3 x i64]*, [3 x i64]** %buf87, align 8, !tbaa !5
  %buf_ptr_cast89 = bitcast [3 x i64]* %buf_ptr88 to i8*
  %slice_ptr90 = getelementptr inbounds i8, i8* %buf_ptr_cast89, i64 %addtmp86
  %slice_val91 = load i8, i8* %slice_ptr90, align 1, !tbaa !7
  %int_val92 = sext i8 %slice_val91 to i64
  %addtmp93 = add nsw i64 %int_val92, 15
  %addtmp94 = add nsw i64 %addtmp93, 0
  store i64 %addtmp94, i64* %vstart1, align 8, !tbaa !3
  %key995 = load { i64 }, { i64 }* %key9, align 8, !tbaa !3
  store { i64 } %key995, { i64 }* %key2, align 8, !tbaa !3
  %key296 = load { i64 }, { i64 }* %key2, align 8, !tbaa !3
  %elemtmp97 = extractvalue { i64 } %key296, 0
  %vstart198 = load i64, i64* %vstart1, align 8, !tbaa !3
  %buf99 = getelementptr inbounds %params, %params* %0, i32 0, i32 0
  %buf_ptr100 = load [3 x i64]*, [3 x i64]** %buf99, align 8, !tbaa !5
  %buf_ptr_cast101 = bitcast [3 x i64]* %buf_ptr100 to i8*
  %slice_ptr102 = getelementptr inbounds i8, i8* %buf_ptr_cast101, i64 %vstart198
  %slice_ptr_cast103 = bitcast i8* %slice_ptr102 to i16*
  %slice_val104 = load i16, i16* %slice_ptr_cast103, align 2, !tbaa !7
  %int_val105 = sext i16 %slice_val104 to i64
  %ptrtmp107 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %tupleptrtmp106, i32 0, i32 0
  store i64 %elemtmp97, i64* %ptrtmp107, align 8, !tbaa !3
  %ptrtmp108 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %tupleptrtmp106, i32 0, i32 1
  store i64 %int_val105, i64* %ptrtmp108, align 8, !tbaa !3
  %tupletmp109 = load { i64, i64 }, { i64, i64 }* %tupleptrtmp106, align 8, !tbaa !3
  %elemtmp110 = extractvalue { i64, i64 } %tupletmp109, 1
  %elemtmp111 = extractvalue { i64, i64 } %tupletmp109, 0
  %1 = call i64 @extract_year(i64 %elemtmp111)
  %2 = call i64 @extract_month(i64 %elemtmp111)
  %3 = call i64 @extract_day(i64 %elemtmp111)
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @date_fmt, i32 0, i32 0), i64 %1, i64 %2, i64 %3)
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @sep_str, i32 0, i32 0))
  %6 = call i64 @extract_year(i64 %elemtmp110)
  %7 = call i64 @extract_month(i64 %elemtmp110)
  %8 = call i64 @extract_day(i64 %elemtmp110)
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @date_fmt, i32 0, i32 0), i64 %6, i64 %7, i64 %8)
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @newline_str, i32 0, i32 0))
  br label %ifend67

else66:                                           ; preds = %if64
  br label %ifend67

ifend67:                                          ; preds = %else66, %then65
  %idx7112 = load i64, i64* %idx7, align 8, !tbaa !3
  %addtmp113 = add nsw i64 %idx7112, 1
  store i64 %addtmp113, i64* %idx7, align 8, !tbaa !3
  %idx7114 = load i64, i64* %idx7, align 8, !tbaa !3
  %multmp115 = mul nsw i64 %idx7114, 3
  %addtmp116 = add nsw i64 0, %multmp115
  store i64 %addtmp116, i64* %kstart0, align 8, !tbaa !3
  %kstart0117 = load i64, i64* %kstart0, align 8, !tbaa !3
  %buf118 = getelementptr inbounds %params, %params* %0, i32 0, i32 0
  %buf_ptr119 = load [3 x i64]*, [3 x i64]** %buf118, align 8, !tbaa !5
  %buf_ptr_cast120 = bitcast [3 x i64]* %buf_ptr119 to i8*
  %slice_ptr121 = getelementptr inbounds i8, i8* %buf_ptr_cast120, i64 %kstart0117
  %slice_ptr_cast122 = bitcast i8* %slice_ptr121 to i16*
  %slice_val123 = load i16, i16* %slice_ptr_cast122, align 2, !tbaa !7
  %int_val124 = sext i16 %slice_val123 to i64
  %ptrtmp126 = getelementptr inbounds { i64 }, { i64 }* %tupleptrtmp125, i32 0, i32 0
  store i64 %int_val124, i64* %ptrtmp126, align 8, !tbaa !3
  %tupletmp127 = load { i64 }, { i64 }* %tupleptrtmp125, align 8, !tbaa !3
  store { i64 } %tupletmp127, { i64 }* %key10, align 8, !tbaa !3
  %key10128 = load { i64 }, { i64 }* %key10, align 8, !tbaa !3
  store { i64 } %key10128, { i64 }* %key9, align 8, !tbaa !3
  %key9129 = load { i64 }, { i64 }* %key9, align 8, !tbaa !3
  %elemtmp130 = extractvalue { i64 } %key9129, 0
  %hoisted5131 = load i64, i64* %hoisted5, align 8, !tbaa !3
  %lttmp132 = icmp slt i64 %elemtmp130, %hoisted5131
  %key9133 = load { i64 }, { i64 }* %key9, align 8, !tbaa !3
  %elemtmp134 = extractvalue { i64 } %key9133, 0
  %hoisted7135 = load i64, i64* %hoisted7, align 8, !tbaa !3
  %eqtmp136 = icmp eq i64 %elemtmp134, %hoisted7135
  %ortmp137 = or i1 %lttmp132, %eqtmp136
  %idx7138 = load i64, i64* %idx7, align 8, !tbaa !3
  %hoisted8139 = load i64, i64* %hoisted8, align 8, !tbaa !3
  %lttmp140 = icmp slt i64 %idx7138, %hoisted8139
  %andtmp141 = and i1 %ortmp137, %lttmp140
  br i1 %andtmp141, label %loopbody52, label %loopend53
}

; Function Attrs: argmemonly norecurse nounwind readonly
define void @consumer(%params* noalias %0) #4 {
entry:
  %tupleptrtmp121 = alloca { i64 }, align 8
  %tupleptrtmp102 = alloca { i64, i64 }, align 8
  %tupleptrtmp43 = alloca { i64 }, align 8
  %tupleptrtmp = alloca { i64 }, align 8
  %hoisted15 = alloca i64, align 8
  %hoisted16 = alloca i64, align 8
  %hoisted17 = alloca i64, align 8
  %hoisted18 = alloca i64, align 8
  %hoisted19 = alloca i64, align 8
  %hoisted20 = alloca i64, align 8
  %hoisted21 = alloca i64, align 8
  %hoisted22 = alloca i64, align 8
  %hoisted23 = alloca i64, align 8
  %hoisted24 = alloca i64, align 8
  %hoisted25 = alloca i64, align 8
  %hoisted26 = alloca i64, align 8
  %hoisted27 = alloca i64, align 8
  %hoisted28 = alloca i64, align 8
  %hoisted29 = alloca i64, align 8
  %mid5 = alloca i64, align 8
  %key10 = alloca { i64 }, align 8
  %key9 = alloca { i64 }, align 8
  %high4 = alloca i64, align 8
  %kstart0 = alloca i64, align 8
  %key6 = alloca { i64 }, align 8
  %idx7 = alloca i64, align 8
  %vstart1 = alloca i64, align 8
  %key2 = alloca { i64 }, align 8
  %key8 = alloca { i64 }, align 8
  %low3 = alloca i64, align 8
  store i64 5, i64* %hoisted15, align 8, !tbaa !3
  store i64 17444, i64* %hoisted16, align 8, !tbaa !3
  %hoisted161 = load i64, i64* %hoisted16, align 8, !tbaa !3
  store i64 %hoisted161, i64* %hoisted17, align 8, !tbaa !3
  store i64 5, i64* %hoisted18, align 8, !tbaa !3
  store i64 17775, i64* %hoisted19, align 8, !tbaa !3
  %hoisted192 = load i64, i64* %hoisted19, align 8, !tbaa !3
  store i64 %hoisted192, i64* %hoisted20, align 8, !tbaa !3
  store i64 17775, i64* %hoisted21, align 8, !tbaa !3
  %hoisted213 = load i64, i64* %hoisted21, align 8, !tbaa !3
  store i64 %hoisted213, i64* %hoisted22, align 8, !tbaa !3
  store i64 5, i64* %hoisted23, align 8, !tbaa !3
  store i64 17775, i64* %hoisted24, align 8, !tbaa !3
  %hoisted244 = load i64, i64* %hoisted24, align 8, !tbaa !3
  store i64 %hoisted244, i64* %hoisted25, align 8, !tbaa !3
  store i64 17775, i64* %hoisted26, align 8, !tbaa !3
  %hoisted265 = load i64, i64* %hoisted26, align 8, !tbaa !3
  store i64 %hoisted265, i64* %hoisted27, align 8, !tbaa !3
  store i64 17444, i64* %hoisted28, align 8, !tbaa !3
  %hoisted286 = load i64, i64* %hoisted28, align 8, !tbaa !3
  store i64 %hoisted286, i64* %hoisted29, align 8, !tbaa !3
  store i64 0, i64* %low3, align 8, !tbaa !3
  %hoisted157 = load i64, i64* %hoisted15, align 8, !tbaa !3
  store i64 %hoisted157, i64* %high4, align 8, !tbaa !3
  br label %loopcond

loopcond:                                         ; preds = %entry
  %low38 = load i64, i64* %low3, align 8, !tbaa !3
  %high49 = load i64, i64* %high4, align 8, !tbaa !3
  %lttmp = icmp slt i64 %low38, %high49
  br i1 %lttmp, label %loopbody, label %loopend

loopbody:                                         ; preds = %ifend, %loopcond
  %low310 = load i64, i64* %low3, align 8, !tbaa !3
  %high411 = load i64, i64* %high4, align 8, !tbaa !3
  %addtmp = add nsw i64 %low310, %high411
  %divtmp = sdiv i64 %addtmp, 2
  store i64 %divtmp, i64* %mid5, align 8, !tbaa !3
  %mid512 = load i64, i64* %mid5, align 8, !tbaa !3
  %multmp = mul nsw i64 %mid512, 3
  %addtmp13 = add nsw i64 0, %multmp
  store i64 %addtmp13, i64* %kstart0, align 8, !tbaa !3
  %kstart014 = load i64, i64* %kstart0, align 8, !tbaa !3
  %buf = getelementptr inbounds %params, %params* %0, i32 0, i32 0
  %buf_ptr = load [3 x i64]*, [3 x i64]** %buf, align 8, !tbaa !5
  %buf_ptr_cast = bitcast [3 x i64]* %buf_ptr to i8*
  %slice_ptr = getelementptr inbounds i8, i8* %buf_ptr_cast, i64 %kstart014
  %slice_ptr_cast = bitcast i8* %slice_ptr to i16*
  %slice_val = load i16, i16* %slice_ptr_cast, align 2, !tbaa !7
  %int_val = sext i16 %slice_val to i64
  %ptrtmp = getelementptr inbounds { i64 }, { i64 }* %tupleptrtmp, i32 0, i32 0
  store i64 %int_val, i64* %ptrtmp, align 8, !tbaa !3
  %tupletmp = load { i64 }, { i64 }* %tupleptrtmp, align 8, !tbaa !3
  store { i64 } %tupletmp, { i64 }* %key6, align 8, !tbaa !3
  br label %if

loopend:                                          ; preds = %ifend, %loopcond
  %low324 = load i64, i64* %low3, align 8, !tbaa !3
  store i64 %low324, i64* %idx7, align 8, !tbaa !3
  br label %if25

if:                                               ; preds = %loopbody
  %key615 = load { i64 }, { i64 }* %key6, align 8, !tbaa !3
  %elemtmp = extractvalue { i64 } %key615, 0
  %hoisted1716 = load i64, i64* %hoisted17, align 8, !tbaa !3
  %lttmp17 = icmp slt i64 %elemtmp, %hoisted1716
  %nottmp = xor i1 %lttmp17, true
  br i1 %nottmp, label %then, label %else

then:                                             ; preds = %if
  %mid518 = load i64, i64* %mid5, align 8, !tbaa !3
  store i64 %mid518, i64* %high4, align 8, !tbaa !3
  br label %ifend

else:                                             ; preds = %if
  %mid519 = load i64, i64* %mid5, align 8, !tbaa !3
  %addtmp20 = add nsw i64 %mid519, 1
  store i64 %addtmp20, i64* %low3, align 8, !tbaa !3
  br label %ifend

ifend:                                            ; preds = %else, %then
  %low321 = load i64, i64* %low3, align 8, !tbaa !3
  %high422 = load i64, i64* %high4, align 8, !tbaa !3
  %lttmp23 = icmp slt i64 %low321, %high422
  br i1 %lttmp23, label %loopbody, label %loopend

if25:                                             ; preds = %loopend
  %idx729 = load i64, i64* %idx7, align 8, !tbaa !3
  %hoisted1830 = load i64, i64* %hoisted18, align 8, !tbaa !3
  %lttmp31 = icmp slt i64 %idx729, %hoisted1830
  br i1 %lttmp31, label %then26, label %else27

then26:                                           ; preds = %if25
  %idx732 = load i64, i64* %idx7, align 8, !tbaa !3
  %multmp33 = mul nsw i64 %idx732, 3
  %addtmp34 = add nsw i64 0, %multmp33
  store i64 %addtmp34, i64* %kstart0, align 8, !tbaa !3
  %kstart035 = load i64, i64* %kstart0, align 8, !tbaa !3
  %buf36 = getelementptr inbounds %params, %params* %0, i32 0, i32 0
  %buf_ptr37 = load [3 x i64]*, [3 x i64]** %buf36, align 8, !tbaa !5
  %buf_ptr_cast38 = bitcast [3 x i64]* %buf_ptr37 to i8*
  %slice_ptr39 = getelementptr inbounds i8, i8* %buf_ptr_cast38, i64 %kstart035
  %slice_ptr_cast40 = bitcast i8* %slice_ptr39 to i16*
  %slice_val41 = load i16, i16* %slice_ptr_cast40, align 2, !tbaa !7
  %int_val42 = sext i16 %slice_val41 to i64
  %ptrtmp44 = getelementptr inbounds { i64 }, { i64 }* %tupleptrtmp43, i32 0, i32 0
  store i64 %int_val42, i64* %ptrtmp44, align 8, !tbaa !3
  %tupletmp45 = load { i64 }, { i64 }* %tupleptrtmp43, align 8, !tbaa !3
  store { i64 } %tupletmp45, { i64 }* %key8, align 8, !tbaa !3
  %key846 = load { i64 }, { i64 }* %key8, align 8, !tbaa !3
  store { i64 } %key846, { i64 }* %key9, align 8, !tbaa !3
  br label %loopcond47

else27:                                           ; preds = %if25
  br label %ifend28

ifend28:                                          ; preds = %else27, %loopend49
  ret void

loopcond47:                                       ; preds = %then26
  %key950 = load { i64 }, { i64 }* %key9, align 8, !tbaa !3
  %elemtmp51 = extractvalue { i64 } %key950, 0
  %hoisted2052 = load i64, i64* %hoisted20, align 8, !tbaa !3
  %lttmp53 = icmp slt i64 %elemtmp51, %hoisted2052
  %key954 = load { i64 }, { i64 }* %key9, align 8, !tbaa !3
  %elemtmp55 = extractvalue { i64 } %key954, 0
  %hoisted2256 = load i64, i64* %hoisted22, align 8, !tbaa !3
  %eqtmp = icmp eq i64 %elemtmp55, %hoisted2256
  %ortmp = or i1 %lttmp53, %eqtmp
  %idx757 = load i64, i64* %idx7, align 8, !tbaa !3
  %hoisted2358 = load i64, i64* %hoisted23, align 8, !tbaa !3
  %lttmp59 = icmp slt i64 %idx757, %hoisted2358
  %andtmp = and i1 %ortmp, %lttmp59
  br i1 %andtmp, label %loopbody48, label %loopend49

loopbody48:                                       ; preds = %ifend63, %loopcond47
  br label %if60

loopend49:                                        ; preds = %ifend63, %loopcond47
  br label %ifend28

if60:                                             ; preds = %loopbody48
  %key964 = load { i64 }, { i64 }* %key9, align 8, !tbaa !3
  %elemtmp65 = extractvalue { i64 } %key964, 0
  %hoisted2566 = load i64, i64* %hoisted25, align 8, !tbaa !3
  %lttmp67 = icmp slt i64 %elemtmp65, %hoisted2566
  %key968 = load { i64 }, { i64 }* %key9, align 8, !tbaa !3
  %elemtmp69 = extractvalue { i64 } %key968, 0
  %hoisted2770 = load i64, i64* %hoisted27, align 8, !tbaa !3
  %eqtmp71 = icmp eq i64 %elemtmp69, %hoisted2770
  %ortmp72 = or i1 %lttmp67, %eqtmp71
  %key973 = load { i64 }, { i64 }* %key9, align 8, !tbaa !3
  %elemtmp74 = extractvalue { i64 } %key973, 0
  %hoisted2975 = load i64, i64* %hoisted29, align 8, !tbaa !3
  %lttmp76 = icmp slt i64 %elemtmp74, %hoisted2975
  %nottmp77 = xor i1 %lttmp76, true
  %andtmp78 = and i1 %ortmp72, %nottmp77
  br i1 %andtmp78, label %then61, label %else62

then61:                                           ; preds = %if60
  %idx779 = load i64, i64* %idx7, align 8, !tbaa !3
  %multmp80 = mul nsw i64 %idx779, 3
  %addtmp81 = add nsw i64 0, %multmp80
  %addtmp82 = add nsw i64 %addtmp81, 2
  %buf83 = getelementptr inbounds %params, %params* %0, i32 0, i32 0
  %buf_ptr84 = load [3 x i64]*, [3 x i64]** %buf83, align 8, !tbaa !5
  %buf_ptr_cast85 = bitcast [3 x i64]* %buf_ptr84 to i8*
  %slice_ptr86 = getelementptr inbounds i8, i8* %buf_ptr_cast85, i64 %addtmp82
  %slice_val87 = load i8, i8* %slice_ptr86, align 1, !tbaa !7
  %int_val88 = sext i8 %slice_val87 to i64
  %addtmp89 = add nsw i64 %int_val88, 15
  %addtmp90 = add nsw i64 %addtmp89, 0
  store i64 %addtmp90, i64* %vstart1, align 8, !tbaa !3
  %key991 = load { i64 }, { i64 }* %key9, align 8, !tbaa !3
  store { i64 } %key991, { i64 }* %key2, align 8, !tbaa !3
  %key292 = load { i64 }, { i64 }* %key2, align 8, !tbaa !3
  %elemtmp93 = extractvalue { i64 } %key292, 0
  %vstart194 = load i64, i64* %vstart1, align 8, !tbaa !3
  %buf95 = getelementptr inbounds %params, %params* %0, i32 0, i32 0
  %buf_ptr96 = load [3 x i64]*, [3 x i64]** %buf95, align 8, !tbaa !5
  %buf_ptr_cast97 = bitcast [3 x i64]* %buf_ptr96 to i8*
  %slice_ptr98 = getelementptr inbounds i8, i8* %buf_ptr_cast97, i64 %vstart194
  %slice_ptr_cast99 = bitcast i8* %slice_ptr98 to i16*
  %slice_val100 = load i16, i16* %slice_ptr_cast99, align 2, !tbaa !7
  %int_val101 = sext i16 %slice_val100 to i64
  %ptrtmp103 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %tupleptrtmp102, i32 0, i32 0
  store i64 %elemtmp93, i64* %ptrtmp103, align 8, !tbaa !3
  %ptrtmp104 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %tupleptrtmp102, i32 0, i32 1
  store i64 %int_val101, i64* %ptrtmp104, align 8, !tbaa !3
  %tupletmp105 = load { i64, i64 }, { i64, i64 }* %tupleptrtmp102, align 8, !tbaa !3
  %elemtmp106 = extractvalue { i64, i64 } %tupletmp105, 1
  %elemtmp107 = extractvalue { i64, i64 } %tupletmp105, 0
  call void asm sideeffect "", "X,~{memory}"(i64 %elemtmp107), !tbaa !9
  call void asm sideeffect "", "X,~{memory}"(i64 %elemtmp106), !tbaa !9
  br label %ifend63

else62:                                           ; preds = %if60
  br label %ifend63

ifend63:                                          ; preds = %else62, %then61
  %idx7108 = load i64, i64* %idx7, align 8, !tbaa !3
  %addtmp109 = add nsw i64 %idx7108, 1
  store i64 %addtmp109, i64* %idx7, align 8, !tbaa !3
  %idx7110 = load i64, i64* %idx7, align 8, !tbaa !3
  %multmp111 = mul nsw i64 %idx7110, 3
  %addtmp112 = add nsw i64 0, %multmp111
  store i64 %addtmp112, i64* %kstart0, align 8, !tbaa !3
  %kstart0113 = load i64, i64* %kstart0, align 8, !tbaa !3
  %buf114 = getelementptr inbounds %params, %params* %0, i32 0, i32 0
  %buf_ptr115 = load [3 x i64]*, [3 x i64]** %buf114, align 8, !tbaa !5
  %buf_ptr_cast116 = bitcast [3 x i64]* %buf_ptr115 to i8*
  %slice_ptr117 = getelementptr inbounds i8, i8* %buf_ptr_cast116, i64 %kstart0113
  %slice_ptr_cast118 = bitcast i8* %slice_ptr117 to i16*
  %slice_val119 = load i16, i16* %slice_ptr_cast118, align 2, !tbaa !7
  %int_val120 = sext i16 %slice_val119 to i64
  %ptrtmp122 = getelementptr inbounds { i64 }, { i64 }* %tupleptrtmp121, i32 0, i32 0
  store i64 %int_val120, i64* %ptrtmp122, align 8, !tbaa !3
  %tupletmp123 = load { i64 }, { i64 }* %tupleptrtmp121, align 8, !tbaa !3
  store { i64 } %tupletmp123, { i64 }* %key10, align 8, !tbaa !3
  %key10124 = load { i64 }, { i64 }* %key10, align 8, !tbaa !3
  store { i64 } %key10124, { i64 }* %key9, align 8, !tbaa !3
  %key9125 = load { i64 }, { i64 }* %key9, align 8, !tbaa !3
  %elemtmp126 = extractvalue { i64 } %key9125, 0
  %hoisted20127 = load i64, i64* %hoisted20, align 8, !tbaa !3
  %lttmp128 = icmp slt i64 %elemtmp126, %hoisted20127
  %key9129 = load { i64 }, { i64 }* %key9, align 8, !tbaa !3
  %elemtmp130 = extractvalue { i64 } %key9129, 0
  %hoisted22131 = load i64, i64* %hoisted22, align 8, !tbaa !3
  %eqtmp132 = icmp eq i64 %elemtmp130, %hoisted22131
  %ortmp133 = or i1 %lttmp128, %eqtmp132
  %idx7134 = load i64, i64* %idx7, align 8, !tbaa !3
  %hoisted23135 = load i64, i64* %hoisted23, align 8, !tbaa !3
  %lttmp136 = icmp slt i64 %idx7134, %hoisted23135
  %andtmp137 = and i1 %ortmp133, %lttmp136
  br i1 %andtmp137, label %loopbody48, label %loopend49
}

define %params* @create(i64* %0) {
entry:
  %malloccall = tail call i8* @malloc(i32 ptrtoint (%params* getelementptr (%params, %params* null, i32 1) to i32))
  %paramstmp = bitcast i8* %malloccall to %params*
  %buf = getelementptr inbounds %params, %params* %paramstmp, i32 0, i32 0
  %tmpbufp = bitcast i64* %0 to [3 x i64]*
  store [3 x i64]* %tmpbufp, [3 x i64]** %buf, align 8
  ret %params* %paramstmp
}

declare noalias i8* @malloc(i32)

attributes #0 = { argmemonly nofree nosync nounwind willreturn }
attributes #1 = { argmemonly readonly speculatable }
attributes #2 = { argmemonly norecurse nounwind readonly speculatable }
attributes #3 = { readnone }
attributes #4 = { argmemonly norecurse nounwind readonly }

!0 = !{!1, !1, i64 0, i64 0}
!1 = !{!"string", !2}
!2 = !{!"castor_root"}
!3 = !{!4, !4, i64 0, i64 0}
!4 = !{!"runtime", !2}
!5 = !{!6, !6, i64 0, i64 1}
!6 = !{!"db", !2}
!7 = !{!8, !8, i64 0, i64 1}
!8 = !{!"db_int", !6}
!9 = !{!10, !10, i64 0, i64 0}
!10 = !{!"consumer", !2}
