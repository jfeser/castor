// Locals:
// hoisted0 : fixed (persists=false)
// hoisted1 : fixed (persists=false)
// found_tup1 : bool (persists=false)
// min6 : fixed (persists=false)
// avg_num3 : fixed (persists=false)
// sum5 : fixed (persists=false)
// count4 : int (persists=false)
// tup0 : tuple[fixed] (persists=false)
// cstart8 : int (persists=true)
// count10 : int (persists=true)
// i9 : int (persists=true)
// max7 : fixed (persists=false)
// avg_dem2 : int (persists=false)
fun printer () : void {
    hoisted0 = int2fl(100);
    hoisted1 = 1.0 + 2.0;
    found_tup1 = false;
    avg_dem2 = 0;
    avg_num3 = 0.0;
    count4 = 0;
    sum5 = 0.0;
    min6 = 4611686018427387903.0;
    max7 = -4611686018427387904.0;
    cstart8 = 0;
    i9 = 0;
    count10 = 5;
    loop (i9 < count10) {
        tup0 = (int2fl(buf[cstart8 : 2]) / hoisted0);
        avg_num3 = avg_num3 + tup0[0];
        avg_dem2 = avg_dem2 + 1;
        count4 = count4 + 1;
        sum5 = sum5 + tup0[0];
        min6 = tup0[0] < min6 ? tup0[0] : min6;
        max7 = tup0[0] < max7 ? max7 : tup0[0];
        found_tup1 = true;
        cstart8 = cstart8 + 2;
        i9 = i9 + 1;
    }
    if (found_tup1) {
        print(tuple[fixed, fixed, int, fixed, fixed, fixed],
        (hoisted1, avg_num3 / int2fl(avg_dem2), count4, sum5, min6, max7));
    } else {
         
    }
}
// Locals:
// hoisted2 : fixed (persists=false)
// hoisted3 : fixed (persists=false)
// found_tup1 : bool (persists=false)
// min6 : fixed (persists=false)
// avg_num3 : fixed (persists=false)
// sum5 : fixed (persists=false)
// count4 : int (persists=false)
// tup0 : tuple[fixed] (persists=false)
// cstart8 : int (persists=true)
// count10 : int (persists=true)
// i9 : int (persists=true)
// max7 : fixed (persists=false)
// avg_dem2 : int (persists=false)
fun consumer () : void {
    hoisted2 = int2fl(100);
    hoisted3 = 1.0 + 2.0;
    found_tup1 = false;
    avg_dem2 = 0;
    avg_num3 = 0.0;
    count4 = 0;
    sum5 = 0.0;
    min6 = 4611686018427387903.0;
    max7 = -4611686018427387904.0;
    cstart8 = 0;
    i9 = 0;
    count10 = 5;
    loop (i9 < count10) {
        tup0 = (int2fl(buf[cstart8 : 2]) / hoisted2);
        avg_num3 = avg_num3 + tup0[0];
        avg_dem2 = avg_dem2 + 1;
        count4 = count4 + 1;
        sum5 = sum5 + tup0[0];
        min6 = tup0[0] < min6 ? tup0[0] : min6;
        max7 = tup0[0] < max7 ? max7 : tup0[0];
        found_tup1 = true;
        cstart8 = cstart8 + 2;
        i9 = i9 + 1;
    }
    if (found_tup1) {
        consume(tuple[fixed, fixed, int, fixed, fixed, fixed],
        (hoisted3, avg_num3 / int2fl(avg_dem2), count4, sum5, min6, max7));
    } else {
         
    }
}
