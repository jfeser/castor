; ModuleID = 'scanner'
source_filename = "scanner"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-redhat-linux-gnu"

%params = type { [75 x i64]* }

@true_str = private unnamed_addr constant [2 x i8] c"t\00", align 1
@false_str = private unnamed_addr constant [2 x i8] c"f\00", align 1
@null_str = private unnamed_addr constant [5 x i8] c"null\00", align 1
@void_str = private unnamed_addr constant [3 x i8] c"()\00", align 1
@sep_str = private unnamed_addr constant [2 x i8] c"|\00", align 1
@newline_str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@int_fmt = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@str_fmt = private unnamed_addr constant [5 x i8] c"%.*s\00", align 1
@float_fmt = private unnamed_addr constant [3 x i8] c"%f\00", align 1
@date_fmt = private unnamed_addr constant [15 x i8] c"%04d-%02d-%02d\00", align 1

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #0

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #0

; Function Attrs: argmemonly readonly speculatable
declare i32 @cmph_search_packed(i8*, i8*, i32) #1

declare i32 @printf(i8*, ...)

; Function Attrs: argmemonly norecurse nounwind readonly speculatable
declare i32 @strncmp(i8* noalias nocapture, i8* noalias nocapture, i64) #2

declare i8* @strncpy(i8*, i8*, i32)

; Function Attrs: argmemonly norecurse nounwind readonly speculatable
declare i64 @strpos(i8* nocapture, i64, i8* nocapture, i64) #2

; Function Attrs: readnone
declare i64 @extract_year(i64) #3

; Function Attrs: readnone
declare i64 @extract_month(i64) #3

; Function Attrs: readnone
declare i64 @extract_day(i64) #3

; Function Attrs: readnone
declare i64 @add_month(i64, i64) #3

; Function Attrs: readnone
declare i64 @add_year(i64, i64) #3

; Function Attrs: argmemonly norecurse nounwind readonly speculatable
define i1 @scmp({ i8*, i64 } %0, { i8*, i64 } %1) #2 {
entry:
  %len = extractvalue { i8*, i64 } %0, 1
  %pos = extractvalue { i8*, i64 } %0, 0
  %len1 = extractvalue { i8*, i64 } %1, 1
  %pos2 = extractvalue { i8*, i64 } %1, 0
  %len_cmp = icmp eq i64 %len, %len1
  br i1 %len_cmp, label %eq, label %neq

eq:                                               ; preds = %entry
  %str_cmp = call i32 @strncmp(i8* %pos, i8* %pos2, i64 %len), !tbaa !0
  %str_cmp3 = icmp eq i32 %str_cmp, 0
  ret i1 %str_cmp3

neq:                                              ; preds = %entry
  ret i1 false
}

; Function Attrs: argmemonly norecurse nounwind readonly
define void @printer(%params* noalias %0) #4 {
entry:
  %tupleptrtmp194 = alloca { i64, i64 }, align 8
  %tupleptrtmp162 = alloca { i64, i64, i64, i64 }, align 8
  %tupleptrtmp62 = alloca { i64, i64 }, align 8
  %tupleptrtmp = alloca { i64, i64 }, align 8
  %hoisted0 = alloca i64, align 8
  %hoisted1 = alloca i64, align 8
  %hoisted2 = alloca i64, align 8
  %mid5 = alloca i64, align 8
  %key13 = alloca { i64, i64 }, align 8
  %key10 = alloca { i64, i64 }, align 8
  %cstart12 = alloca i64, align 8
  %high4 = alloca i64, align 8
  %cstart17 = alloca i64, align 8
  %cstart8 = alloca i64, align 8
  %cstart15 = alloca i64, align 8
  %key16 = alloca { i64, i64 }, align 8
  %key2 = alloca { i64, i64 }, align 8
  %low3 = alloca i64, align 8
  %cstart7 = alloca i64, align 8
  %cstart18 = alloca i64, align 8
  %kstart0 = alloca i64, align 8
  %key6 = alloca { i64, i64 }, align 8
  %cstart11 = alloca i64, align 8
  %vstart1 = alloca i64, align 8
  %idx9 = alloca i64, align 8
  %cstart14 = alloca i64, align 8
  store i64 100, i64* %hoisted0, align 8, !tbaa !3
  store i64 100, i64* %hoisted1, align 8, !tbaa !3
  store i64 100, i64* %hoisted2, align 8, !tbaa !3
  store i64 0, i64* %low3, align 8, !tbaa !3
  %hoisted01 = load i64, i64* %hoisted0, align 8, !tbaa !3
  store i64 %hoisted01, i64* %high4, align 8, !tbaa !3
  br label %loopcond

loopcond:                                         ; preds = %entry
  %low32 = load i64, i64* %low3, align 8, !tbaa !3
  %high43 = load i64, i64* %high4, align 8, !tbaa !3
  %lttmp = icmp slt i64 %low32, %high43
  br i1 %lttmp, label %loopbody, label %loopend

loopbody:                                         ; preds = %ifend, %loopcond
  %low34 = load i64, i64* %low3, align 8, !tbaa !3
  %high45 = load i64, i64* %high4, align 8, !tbaa !3
  %addtmp = add nsw i64 %low34, %high45
  %divtmp = sdiv i64 %addtmp, 2
  store i64 %divtmp, i64* %mid5, align 8, !tbaa !3
  %mid56 = load i64, i64* %mid5, align 8, !tbaa !3
  %multmp = mul nsw i64 %mid56, 4
  %addtmp7 = add nsw i64 0, %multmp
  store i64 %addtmp7, i64* %kstart0, align 8, !tbaa !3
  %kstart08 = load i64, i64* %kstart0, align 8, !tbaa !3
  store i64 %kstart08, i64* %cstart7, align 8, !tbaa !3
  %cstart79 = load i64, i64* %cstart7, align 8, !tbaa !3
  %addtmp10 = add nsw i64 %cstart79, 1
  store i64 %addtmp10, i64* %cstart8, align 8, !tbaa !3
  %cstart711 = load i64, i64* %cstart7, align 8, !tbaa !3
  %buf = getelementptr inbounds %params, %params* %0, i32 0, i32 0
  %buf_ptr = load [75 x i64]*, [75 x i64]** %buf, align 8, !tbaa !5
  %buf_ptr_cast = bitcast [75 x i64]* %buf_ptr to i8*
  %slice_ptr = getelementptr inbounds i8, i8* %buf_ptr_cast, i64 %cstart711
  %slice_val = load i8, i8* %slice_ptr, align 1, !tbaa !7
  %int_val = sext i8 %slice_val to i64
  %cstart812 = load i64, i64* %cstart8, align 8, !tbaa !3
  %buf13 = getelementptr inbounds %params, %params* %0, i32 0, i32 0
  %buf_ptr14 = load [75 x i64]*, [75 x i64]** %buf13, align 8, !tbaa !5
  %buf_ptr_cast15 = bitcast [75 x i64]* %buf_ptr14 to i8*
  %slice_ptr16 = getelementptr inbounds i8, i8* %buf_ptr_cast15, i64 %cstart812
  %slice_val17 = load i8, i8* %slice_ptr16, align 1, !tbaa !7
  %int_val18 = sext i8 %slice_val17 to i64
  %ptrtmp = getelementptr inbounds { i64, i64 }, { i64, i64 }* %tupleptrtmp, i32 0, i32 0
  store i64 %int_val, i64* %ptrtmp, align 8, !tbaa !3
  %ptrtmp19 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %tupleptrtmp, i32 0, i32 1
  store i64 %int_val18, i64* %ptrtmp19, align 8, !tbaa !3
  %tupletmp = load { i64, i64 }, { i64, i64 }* %tupleptrtmp, align 8, !tbaa !3
  store { i64, i64 } %tupletmp, { i64, i64 }* %key6, align 8, !tbaa !3
  br label %if

loopend:                                          ; preds = %ifend, %loopcond
  %low334 = load i64, i64* %low3, align 8, !tbaa !3
  store i64 %low334, i64* %idx9, align 8, !tbaa !3
  br label %if35

if:                                               ; preds = %loopbody
  %key620 = load { i64, i64 }, { i64, i64 }* %key6, align 8, !tbaa !3
  %elemtmp = extractvalue { i64, i64 } %key620, 1
  %elemtmp21 = extractvalue { i64, i64 } %key620, 0
  %lttmp22 = icmp slt i64 %elemtmp21, 3
  %nottmp = xor i1 %lttmp22, true
  %key623 = load { i64, i64 }, { i64, i64 }* %key6, align 8, !tbaa !3
  %elemtmp24 = extractvalue { i64, i64 } %key623, 1
  %elemtmp25 = extractvalue { i64, i64 } %key623, 0
  %lttmp26 = icmp slt i64 %elemtmp24, 4
  %nottmp27 = xor i1 %lttmp26, true
  %ortmp = or i1 %nottmp, %nottmp27
  br i1 %ortmp, label %then, label %else

then:                                             ; preds = %if
  %mid528 = load i64, i64* %mid5, align 8, !tbaa !3
  store i64 %mid528, i64* %high4, align 8, !tbaa !3
  br label %ifend

else:                                             ; preds = %if
  %mid529 = load i64, i64* %mid5, align 8, !tbaa !3
  %addtmp30 = add nsw i64 %mid529, 1
  store i64 %addtmp30, i64* %low3, align 8, !tbaa !3
  br label %ifend

ifend:                                            ; preds = %else, %then
  %low331 = load i64, i64* %low3, align 8, !tbaa !3
  %high432 = load i64, i64* %high4, align 8, !tbaa !3
  %lttmp33 = icmp slt i64 %low331, %high432
  br i1 %lttmp33, label %loopbody, label %loopend

if35:                                             ; preds = %loopend
  %idx939 = load i64, i64* %idx9, align 8, !tbaa !3
  %hoisted140 = load i64, i64* %hoisted1, align 8, !tbaa !3
  %lttmp41 = icmp slt i64 %idx939, %hoisted140
  br i1 %lttmp41, label %then36, label %else37

then36:                                           ; preds = %if35
  %idx942 = load i64, i64* %idx9, align 8, !tbaa !3
  %multmp43 = mul nsw i64 %idx942, 4
  %addtmp44 = add nsw i64 0, %multmp43
  store i64 %addtmp44, i64* %kstart0, align 8, !tbaa !3
  %kstart045 = load i64, i64* %kstart0, align 8, !tbaa !3
  store i64 %kstart045, i64* %cstart11, align 8, !tbaa !3
  %cstart1146 = load i64, i64* %cstart11, align 8, !tbaa !3
  %addtmp47 = add nsw i64 %cstart1146, 1
  store i64 %addtmp47, i64* %cstart12, align 8, !tbaa !3
  %cstart1148 = load i64, i64* %cstart11, align 8, !tbaa !3
  %buf49 = getelementptr inbounds %params, %params* %0, i32 0, i32 0
  %buf_ptr50 = load [75 x i64]*, [75 x i64]** %buf49, align 8, !tbaa !5
  %buf_ptr_cast51 = bitcast [75 x i64]* %buf_ptr50 to i8*
  %slice_ptr52 = getelementptr inbounds i8, i8* %buf_ptr_cast51, i64 %cstart1148
  %slice_val53 = load i8, i8* %slice_ptr52, align 1, !tbaa !7
  %int_val54 = sext i8 %slice_val53 to i64
  %cstart1255 = load i64, i64* %cstart12, align 8, !tbaa !3
  %buf56 = getelementptr inbounds %params, %params* %0, i32 0, i32 0
  %buf_ptr57 = load [75 x i64]*, [75 x i64]** %buf56, align 8, !tbaa !5
  %buf_ptr_cast58 = bitcast [75 x i64]* %buf_ptr57 to i8*
  %slice_ptr59 = getelementptr inbounds i8, i8* %buf_ptr_cast58, i64 %cstart1255
  %slice_val60 = load i8, i8* %slice_ptr59, align 1, !tbaa !7
  %int_val61 = sext i8 %slice_val60 to i64
  %ptrtmp63 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %tupleptrtmp62, i32 0, i32 0
  store i64 %int_val54, i64* %ptrtmp63, align 8, !tbaa !3
  %ptrtmp64 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %tupleptrtmp62, i32 0, i32 1
  store i64 %int_val61, i64* %ptrtmp64, align 8, !tbaa !3
  %tupletmp65 = load { i64, i64 }, { i64, i64 }* %tupleptrtmp62, align 8, !tbaa !3
  store { i64, i64 } %tupletmp65, { i64, i64 }* %key10, align 8, !tbaa !3
  %key1066 = load { i64, i64 }, { i64, i64 }* %key10, align 8, !tbaa !3
  store { i64, i64 } %key1066, { i64, i64 }* %key13, align 8, !tbaa !3
  br label %loopcond67

else37:                                           ; preds = %if35
  br label %ifend38

ifend38:                                          ; preds = %else37, %loopend69
  ret void

loopcond67:                                       ; preds = %then36
  %key1370 = load { i64, i64 }, { i64, i64 }* %key13, align 8, !tbaa !3
  %elemtmp71 = extractvalue { i64, i64 } %key1370, 1
  %elemtmp72 = extractvalue { i64, i64 } %key1370, 0
  %lttmp73 = icmp slt i64 %elemtmp72, 5
  %key1374 = load { i64, i64 }, { i64, i64 }* %key13, align 8, !tbaa !3
  %elemtmp75 = extractvalue { i64, i64 } %key1374, 1
  %elemtmp76 = extractvalue { i64, i64 } %key1374, 0
  %eqtmp = icmp eq i64 %elemtmp76, 5
  %ortmp77 = or i1 %lttmp73, %eqtmp
  %key1378 = load { i64, i64 }, { i64, i64 }* %key13, align 8, !tbaa !3
  %elemtmp79 = extractvalue { i64, i64 } %key1378, 1
  %elemtmp80 = extractvalue { i64, i64 } %key1378, 0
  %lttmp81 = icmp slt i64 %elemtmp79, 6
  %key1382 = load { i64, i64 }, { i64, i64 }* %key13, align 8, !tbaa !3
  %elemtmp83 = extractvalue { i64, i64 } %key1382, 1
  %elemtmp84 = extractvalue { i64, i64 } %key1382, 0
  %eqtmp85 = icmp eq i64 %elemtmp83, 6
  %ortmp86 = or i1 %lttmp81, %eqtmp85
  %ortmp87 = or i1 %ortmp77, %ortmp86
  %idx988 = load i64, i64* %idx9, align 8, !tbaa !3
  %hoisted289 = load i64, i64* %hoisted2, align 8, !tbaa !3
  %lttmp90 = icmp slt i64 %idx988, %hoisted289
  %andtmp = and i1 %ortmp87, %lttmp90
  br i1 %andtmp, label %loopbody68, label %loopend69

loopbody68:                                       ; preds = %ifend94, %loopcond67
  br label %if91

loopend69:                                        ; preds = %ifend94, %loopcond67
  br label %ifend38

if91:                                             ; preds = %loopbody68
  %key1395 = load { i64, i64 }, { i64, i64 }* %key13, align 8, !tbaa !3
  %elemtmp96 = extractvalue { i64, i64 } %key1395, 1
  %elemtmp97 = extractvalue { i64, i64 } %key1395, 0
  %lttmp98 = icmp slt i64 %elemtmp97, 5
  %key1399 = load { i64, i64 }, { i64, i64 }* %key13, align 8, !tbaa !3
  %elemtmp100 = extractvalue { i64, i64 } %key1399, 1
  %elemtmp101 = extractvalue { i64, i64 } %key1399, 0
  %eqtmp102 = icmp eq i64 %elemtmp101, 5
  %ortmp103 = or i1 %lttmp98, %eqtmp102
  %key13104 = load { i64, i64 }, { i64, i64 }* %key13, align 8, !tbaa !3
  %elemtmp105 = extractvalue { i64, i64 } %key13104, 1
  %elemtmp106 = extractvalue { i64, i64 } %key13104, 0
  %lttmp107 = icmp slt i64 %elemtmp105, 6
  %key13108 = load { i64, i64 }, { i64, i64 }* %key13, align 8, !tbaa !3
  %elemtmp109 = extractvalue { i64, i64 } %key13108, 1
  %elemtmp110 = extractvalue { i64, i64 } %key13108, 0
  %eqtmp111 = icmp eq i64 %elemtmp109, 6
  %ortmp112 = or i1 %lttmp107, %eqtmp111
  %key13113 = load { i64, i64 }, { i64, i64 }* %key13, align 8, !tbaa !3
  %elemtmp114 = extractvalue { i64, i64 } %key13113, 1
  %elemtmp115 = extractvalue { i64, i64 } %key13113, 0
  %lttmp116 = icmp slt i64 %elemtmp115, 3
  %nottmp117 = xor i1 %lttmp116, true
  %key13118 = load { i64, i64 }, { i64, i64 }* %key13, align 8, !tbaa !3
  %elemtmp119 = extractvalue { i64, i64 } %key13118, 1
  %elemtmp120 = extractvalue { i64, i64 } %key13118, 0
  %lttmp121 = icmp slt i64 %elemtmp119, 4
  %nottmp122 = xor i1 %lttmp121, true
  %andtmp123 = and i1 %nottmp117, %nottmp122
  %andtmp124 = and i1 %ortmp112, %andtmp123
  %andtmp125 = and i1 %ortmp103, %andtmp124
  br i1 %andtmp125, label %then92, label %else93

then92:                                           ; preds = %if91
  %idx9126 = load i64, i64* %idx9, align 8, !tbaa !3
  %multmp127 = mul nsw i64 %idx9126, 4
  %addtmp128 = add nsw i64 0, %multmp127
  %addtmp129 = add nsw i64 %addtmp128, 2
  %buf130 = getelementptr inbounds %params, %params* %0, i32 0, i32 0
  %buf_ptr131 = load [75 x i64]*, [75 x i64]** %buf130, align 8, !tbaa !5
  %buf_ptr_cast132 = bitcast [75 x i64]* %buf_ptr131 to i8*
  %slice_ptr133 = getelementptr inbounds i8, i8* %buf_ptr_cast132, i64 %addtmp129
  %slice_ptr_cast = bitcast i8* %slice_ptr133 to i16*
  %slice_val134 = load i16, i16* %slice_ptr_cast, align 2, !tbaa !7
  %int_val135 = sext i16 %slice_val134 to i64
  %addtmp136 = add nsw i64 %int_val135, 400
  %addtmp137 = add nsw i64 %addtmp136, 0
  store i64 %addtmp137, i64* %vstart1, align 8, !tbaa !3
  %key13138 = load { i64, i64 }, { i64, i64 }* %key13, align 8, !tbaa !3
  store { i64, i64 } %key13138, { i64, i64 }* %key2, align 8, !tbaa !3
  %vstart1139 = load i64, i64* %vstart1, align 8, !tbaa !3
  store i64 %vstart1139, i64* %cstart14, align 8, !tbaa !3
  %cstart14140 = load i64, i64* %cstart14, align 8, !tbaa !3
  %addtmp141 = add nsw i64 %cstart14140, 1
  store i64 %addtmp141, i64* %cstart15, align 8, !tbaa !3
  %key2142 = load { i64, i64 }, { i64, i64 }* %key2, align 8, !tbaa !3
  %elemtmp143 = extractvalue { i64, i64 } %key2142, 1
  %elemtmp144 = extractvalue { i64, i64 } %key2142, 0
  %key2145 = load { i64, i64 }, { i64, i64 }* %key2, align 8, !tbaa !3
  %elemtmp146 = extractvalue { i64, i64 } %key2145, 1
  %elemtmp147 = extractvalue { i64, i64 } %key2145, 0
  %cstart14148 = load i64, i64* %cstart14, align 8, !tbaa !3
  %buf149 = getelementptr inbounds %params, %params* %0, i32 0, i32 0
  %buf_ptr150 = load [75 x i64]*, [75 x i64]** %buf149, align 8, !tbaa !5
  %buf_ptr_cast151 = bitcast [75 x i64]* %buf_ptr150 to i8*
  %slice_ptr152 = getelementptr inbounds i8, i8* %buf_ptr_cast151, i64 %cstart14148
  %slice_val153 = load i8, i8* %slice_ptr152, align 1, !tbaa !7
  %int_val154 = sext i8 %slice_val153 to i64
  %cstart15155 = load i64, i64* %cstart15, align 8, !tbaa !3
  %buf156 = getelementptr inbounds %params, %params* %0, i32 0, i32 0
  %buf_ptr157 = load [75 x i64]*, [75 x i64]** %buf156, align 8, !tbaa !5
  %buf_ptr_cast158 = bitcast [75 x i64]* %buf_ptr157 to i8*
  %slice_ptr159 = getelementptr inbounds i8, i8* %buf_ptr_cast158, i64 %cstart15155
  %slice_val160 = load i8, i8* %slice_ptr159, align 1, !tbaa !7
  %int_val161 = sext i8 %slice_val160 to i64
  %ptrtmp163 = getelementptr inbounds { i64, i64, i64, i64 }, { i64, i64, i64, i64 }* %tupleptrtmp162, i32 0, i32 0
  store i64 %elemtmp144, i64* %ptrtmp163, align 8, !tbaa !3
  %ptrtmp164 = getelementptr inbounds { i64, i64, i64, i64 }, { i64, i64, i64, i64 }* %tupleptrtmp162, i32 0, i32 1
  store i64 %elemtmp146, i64* %ptrtmp164, align 8, !tbaa !3
  %ptrtmp165 = getelementptr inbounds { i64, i64, i64, i64 }, { i64, i64, i64, i64 }* %tupleptrtmp162, i32 0, i32 2
  store i64 %int_val154, i64* %ptrtmp165, align 8, !tbaa !3
  %ptrtmp166 = getelementptr inbounds { i64, i64, i64, i64 }, { i64, i64, i64, i64 }* %tupleptrtmp162, i32 0, i32 3
  store i64 %int_val161, i64* %ptrtmp166, align 8, !tbaa !3
  %tupletmp167 = load { i64, i64, i64, i64 }, { i64, i64, i64, i64 }* %tupleptrtmp162, align 8, !tbaa !3
  %elemtmp168 = extractvalue { i64, i64, i64, i64 } %tupletmp167, 3
  %elemtmp169 = extractvalue { i64, i64, i64, i64 } %tupletmp167, 2
  %elemtmp170 = extractvalue { i64, i64, i64, i64 } %tupletmp167, 1
  %elemtmp171 = extractvalue { i64, i64, i64, i64 } %tupletmp167, 0
  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @int_fmt, i32 0, i32 0), i64 %elemtmp171)
  %2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @sep_str, i32 0, i32 0))
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @int_fmt, i32 0, i32 0), i64 %elemtmp170)
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @sep_str, i32 0, i32 0))
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @int_fmt, i32 0, i32 0), i64 %elemtmp169)
  %6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @sep_str, i32 0, i32 0))
  %7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @int_fmt, i32 0, i32 0), i64 %elemtmp168)
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @newline_str, i32 0, i32 0))
  br label %ifend94

else93:                                           ; preds = %if91
  br label %ifend94

ifend94:                                          ; preds = %else93, %then92
  %idx9172 = load i64, i64* %idx9, align 8, !tbaa !3
  %addtmp173 = add nsw i64 %idx9172, 1
  store i64 %addtmp173, i64* %idx9, align 8, !tbaa !3
  %idx9174 = load i64, i64* %idx9, align 8, !tbaa !3
  %multmp175 = mul nsw i64 %idx9174, 4
  %addtmp176 = add nsw i64 0, %multmp175
  store i64 %addtmp176, i64* %kstart0, align 8, !tbaa !3
  %kstart0177 = load i64, i64* %kstart0, align 8, !tbaa !3
  store i64 %kstart0177, i64* %cstart17, align 8, !tbaa !3
  %cstart17178 = load i64, i64* %cstart17, align 8, !tbaa !3
  %addtmp179 = add nsw i64 %cstart17178, 1
  store i64 %addtmp179, i64* %cstart18, align 8, !tbaa !3
  %cstart17180 = load i64, i64* %cstart17, align 8, !tbaa !3
  %buf181 = getelementptr inbounds %params, %params* %0, i32 0, i32 0
  %buf_ptr182 = load [75 x i64]*, [75 x i64]** %buf181, align 8, !tbaa !5
  %buf_ptr_cast183 = bitcast [75 x i64]* %buf_ptr182 to i8*
  %slice_ptr184 = getelementptr inbounds i8, i8* %buf_ptr_cast183, i64 %cstart17180
  %slice_val185 = load i8, i8* %slice_ptr184, align 1, !tbaa !7
  %int_val186 = sext i8 %slice_val185 to i64
  %cstart18187 = load i64, i64* %cstart18, align 8, !tbaa !3
  %buf188 = getelementptr inbounds %params, %params* %0, i32 0, i32 0
  %buf_ptr189 = load [75 x i64]*, [75 x i64]** %buf188, align 8, !tbaa !5
  %buf_ptr_cast190 = bitcast [75 x i64]* %buf_ptr189 to i8*
  %slice_ptr191 = getelementptr inbounds i8, i8* %buf_ptr_cast190, i64 %cstart18187
  %slice_val192 = load i8, i8* %slice_ptr191, align 1, !tbaa !7
  %int_val193 = sext i8 %slice_val192 to i64
  %ptrtmp195 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %tupleptrtmp194, i32 0, i32 0
  store i64 %int_val186, i64* %ptrtmp195, align 8, !tbaa !3
  %ptrtmp196 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %tupleptrtmp194, i32 0, i32 1
  store i64 %int_val193, i64* %ptrtmp196, align 8, !tbaa !3
  %tupletmp197 = load { i64, i64 }, { i64, i64 }* %tupleptrtmp194, align 8, !tbaa !3
  store { i64, i64 } %tupletmp197, { i64, i64 }* %key16, align 8, !tbaa !3
  %key16198 = load { i64, i64 }, { i64, i64 }* %key16, align 8, !tbaa !3
  store { i64, i64 } %key16198, { i64, i64 }* %key13, align 8, !tbaa !3
  %key13199 = load { i64, i64 }, { i64, i64 }* %key13, align 8, !tbaa !3
  %elemtmp200 = extractvalue { i64, i64 } %key13199, 1
  %elemtmp201 = extractvalue { i64, i64 } %key13199, 0
  %lttmp202 = icmp slt i64 %elemtmp201, 5
  %key13203 = load { i64, i64 }, { i64, i64 }* %key13, align 8, !tbaa !3
  %elemtmp204 = extractvalue { i64, i64 } %key13203, 1
  %elemtmp205 = extractvalue { i64, i64 } %key13203, 0
  %eqtmp206 = icmp eq i64 %elemtmp205, 5
  %ortmp207 = or i1 %lttmp202, %eqtmp206
  %key13208 = load { i64, i64 }, { i64, i64 }* %key13, align 8, !tbaa !3
  %elemtmp209 = extractvalue { i64, i64 } %key13208, 1
  %elemtmp210 = extractvalue { i64, i64 } %key13208, 0
  %lttmp211 = icmp slt i64 %elemtmp209, 6
  %key13212 = load { i64, i64 }, { i64, i64 }* %key13, align 8, !tbaa !3
  %elemtmp213 = extractvalue { i64, i64 } %key13212, 1
  %elemtmp214 = extractvalue { i64, i64 } %key13212, 0
  %eqtmp215 = icmp eq i64 %elemtmp213, 6
  %ortmp216 = or i1 %lttmp211, %eqtmp215
  %ortmp217 = or i1 %ortmp207, %ortmp216
  %idx9218 = load i64, i64* %idx9, align 8, !tbaa !3
  %hoisted2219 = load i64, i64* %hoisted2, align 8, !tbaa !3
  %lttmp220 = icmp slt i64 %idx9218, %hoisted2219
  %andtmp221 = and i1 %ortmp217, %lttmp220
  br i1 %andtmp221, label %loopbody68, label %loopend69
}

; Function Attrs: argmemonly norecurse nounwind readonly
define void @consumer(%params* noalias %0) #4 {
entry:
  %tupleptrtmp194 = alloca { i64, i64 }, align 8
  %tupleptrtmp162 = alloca { i64, i64, i64, i64 }, align 8
  %tupleptrtmp62 = alloca { i64, i64 }, align 8
  %tupleptrtmp = alloca { i64, i64 }, align 8
  %hoisted3 = alloca i64, align 8
  %hoisted4 = alloca i64, align 8
  %hoisted5 = alloca i64, align 8
  %mid5 = alloca i64, align 8
  %key13 = alloca { i64, i64 }, align 8
  %key10 = alloca { i64, i64 }, align 8
  %cstart12 = alloca i64, align 8
  %high4 = alloca i64, align 8
  %cstart17 = alloca i64, align 8
  %cstart8 = alloca i64, align 8
  %cstart15 = alloca i64, align 8
  %key16 = alloca { i64, i64 }, align 8
  %key2 = alloca { i64, i64 }, align 8
  %low3 = alloca i64, align 8
  %cstart7 = alloca i64, align 8
  %cstart18 = alloca i64, align 8
  %kstart0 = alloca i64, align 8
  %key6 = alloca { i64, i64 }, align 8
  %cstart11 = alloca i64, align 8
  %vstart1 = alloca i64, align 8
  %idx9 = alloca i64, align 8
  %cstart14 = alloca i64, align 8
  store i64 100, i64* %hoisted3, align 8, !tbaa !3
  store i64 100, i64* %hoisted4, align 8, !tbaa !3
  store i64 100, i64* %hoisted5, align 8, !tbaa !3
  store i64 0, i64* %low3, align 8, !tbaa !3
  %hoisted31 = load i64, i64* %hoisted3, align 8, !tbaa !3
  store i64 %hoisted31, i64* %high4, align 8, !tbaa !3
  br label %loopcond

loopcond:                                         ; preds = %entry
  %low32 = load i64, i64* %low3, align 8, !tbaa !3
  %high43 = load i64, i64* %high4, align 8, !tbaa !3
  %lttmp = icmp slt i64 %low32, %high43
  br i1 %lttmp, label %loopbody, label %loopend

loopbody:                                         ; preds = %ifend, %loopcond
  %low34 = load i64, i64* %low3, align 8, !tbaa !3
  %high45 = load i64, i64* %high4, align 8, !tbaa !3
  %addtmp = add nsw i64 %low34, %high45
  %divtmp = sdiv i64 %addtmp, 2
  store i64 %divtmp, i64* %mid5, align 8, !tbaa !3
  %mid56 = load i64, i64* %mid5, align 8, !tbaa !3
  %multmp = mul nsw i64 %mid56, 4
  %addtmp7 = add nsw i64 0, %multmp
  store i64 %addtmp7, i64* %kstart0, align 8, !tbaa !3
  %kstart08 = load i64, i64* %kstart0, align 8, !tbaa !3
  store i64 %kstart08, i64* %cstart7, align 8, !tbaa !3
  %cstart79 = load i64, i64* %cstart7, align 8, !tbaa !3
  %addtmp10 = add nsw i64 %cstart79, 1
  store i64 %addtmp10, i64* %cstart8, align 8, !tbaa !3
  %cstart711 = load i64, i64* %cstart7, align 8, !tbaa !3
  %buf = getelementptr inbounds %params, %params* %0, i32 0, i32 0
  %buf_ptr = load [75 x i64]*, [75 x i64]** %buf, align 8, !tbaa !5
  %buf_ptr_cast = bitcast [75 x i64]* %buf_ptr to i8*
  %slice_ptr = getelementptr inbounds i8, i8* %buf_ptr_cast, i64 %cstart711
  %slice_val = load i8, i8* %slice_ptr, align 1, !tbaa !7
  %int_val = sext i8 %slice_val to i64
  %cstart812 = load i64, i64* %cstart8, align 8, !tbaa !3
  %buf13 = getelementptr inbounds %params, %params* %0, i32 0, i32 0
  %buf_ptr14 = load [75 x i64]*, [75 x i64]** %buf13, align 8, !tbaa !5
  %buf_ptr_cast15 = bitcast [75 x i64]* %buf_ptr14 to i8*
  %slice_ptr16 = getelementptr inbounds i8, i8* %buf_ptr_cast15, i64 %cstart812
  %slice_val17 = load i8, i8* %slice_ptr16, align 1, !tbaa !7
  %int_val18 = sext i8 %slice_val17 to i64
  %ptrtmp = getelementptr inbounds { i64, i64 }, { i64, i64 }* %tupleptrtmp, i32 0, i32 0
  store i64 %int_val, i64* %ptrtmp, align 8, !tbaa !3
  %ptrtmp19 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %tupleptrtmp, i32 0, i32 1
  store i64 %int_val18, i64* %ptrtmp19, align 8, !tbaa !3
  %tupletmp = load { i64, i64 }, { i64, i64 }* %tupleptrtmp, align 8, !tbaa !3
  store { i64, i64 } %tupletmp, { i64, i64 }* %key6, align 8, !tbaa !3
  br label %if

loopend:                                          ; preds = %ifend, %loopcond
  %low334 = load i64, i64* %low3, align 8, !tbaa !3
  store i64 %low334, i64* %idx9, align 8, !tbaa !3
  br label %if35

if:                                               ; preds = %loopbody
  %key620 = load { i64, i64 }, { i64, i64 }* %key6, align 8, !tbaa !3
  %elemtmp = extractvalue { i64, i64 } %key620, 1
  %elemtmp21 = extractvalue { i64, i64 } %key620, 0
  %lttmp22 = icmp slt i64 %elemtmp21, 3
  %nottmp = xor i1 %lttmp22, true
  %key623 = load { i64, i64 }, { i64, i64 }* %key6, align 8, !tbaa !3
  %elemtmp24 = extractvalue { i64, i64 } %key623, 1
  %elemtmp25 = extractvalue { i64, i64 } %key623, 0
  %lttmp26 = icmp slt i64 %elemtmp24, 4
  %nottmp27 = xor i1 %lttmp26, true
  %ortmp = or i1 %nottmp, %nottmp27
  br i1 %ortmp, label %then, label %else

then:                                             ; preds = %if
  %mid528 = load i64, i64* %mid5, align 8, !tbaa !3
  store i64 %mid528, i64* %high4, align 8, !tbaa !3
  br label %ifend

else:                                             ; preds = %if
  %mid529 = load i64, i64* %mid5, align 8, !tbaa !3
  %addtmp30 = add nsw i64 %mid529, 1
  store i64 %addtmp30, i64* %low3, align 8, !tbaa !3
  br label %ifend

ifend:                                            ; preds = %else, %then
  %low331 = load i64, i64* %low3, align 8, !tbaa !3
  %high432 = load i64, i64* %high4, align 8, !tbaa !3
  %lttmp33 = icmp slt i64 %low331, %high432
  br i1 %lttmp33, label %loopbody, label %loopend

if35:                                             ; preds = %loopend
  %idx939 = load i64, i64* %idx9, align 8, !tbaa !3
  %hoisted440 = load i64, i64* %hoisted4, align 8, !tbaa !3
  %lttmp41 = icmp slt i64 %idx939, %hoisted440
  br i1 %lttmp41, label %then36, label %else37

then36:                                           ; preds = %if35
  %idx942 = load i64, i64* %idx9, align 8, !tbaa !3
  %multmp43 = mul nsw i64 %idx942, 4
  %addtmp44 = add nsw i64 0, %multmp43
  store i64 %addtmp44, i64* %kstart0, align 8, !tbaa !3
  %kstart045 = load i64, i64* %kstart0, align 8, !tbaa !3
  store i64 %kstart045, i64* %cstart11, align 8, !tbaa !3
  %cstart1146 = load i64, i64* %cstart11, align 8, !tbaa !3
  %addtmp47 = add nsw i64 %cstart1146, 1
  store i64 %addtmp47, i64* %cstart12, align 8, !tbaa !3
  %cstart1148 = load i64, i64* %cstart11, align 8, !tbaa !3
  %buf49 = getelementptr inbounds %params, %params* %0, i32 0, i32 0
  %buf_ptr50 = load [75 x i64]*, [75 x i64]** %buf49, align 8, !tbaa !5
  %buf_ptr_cast51 = bitcast [75 x i64]* %buf_ptr50 to i8*
  %slice_ptr52 = getelementptr inbounds i8, i8* %buf_ptr_cast51, i64 %cstart1148
  %slice_val53 = load i8, i8* %slice_ptr52, align 1, !tbaa !7
  %int_val54 = sext i8 %slice_val53 to i64
  %cstart1255 = load i64, i64* %cstart12, align 8, !tbaa !3
  %buf56 = getelementptr inbounds %params, %params* %0, i32 0, i32 0
  %buf_ptr57 = load [75 x i64]*, [75 x i64]** %buf56, align 8, !tbaa !5
  %buf_ptr_cast58 = bitcast [75 x i64]* %buf_ptr57 to i8*
  %slice_ptr59 = getelementptr inbounds i8, i8* %buf_ptr_cast58, i64 %cstart1255
  %slice_val60 = load i8, i8* %slice_ptr59, align 1, !tbaa !7
  %int_val61 = sext i8 %slice_val60 to i64
  %ptrtmp63 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %tupleptrtmp62, i32 0, i32 0
  store i64 %int_val54, i64* %ptrtmp63, align 8, !tbaa !3
  %ptrtmp64 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %tupleptrtmp62, i32 0, i32 1
  store i64 %int_val61, i64* %ptrtmp64, align 8, !tbaa !3
  %tupletmp65 = load { i64, i64 }, { i64, i64 }* %tupleptrtmp62, align 8, !tbaa !3
  store { i64, i64 } %tupletmp65, { i64, i64 }* %key10, align 8, !tbaa !3
  %key1066 = load { i64, i64 }, { i64, i64 }* %key10, align 8, !tbaa !3
  store { i64, i64 } %key1066, { i64, i64 }* %key13, align 8, !tbaa !3
  br label %loopcond67

else37:                                           ; preds = %if35
  br label %ifend38

ifend38:                                          ; preds = %else37, %loopend69
  ret void

loopcond67:                                       ; preds = %then36
  %key1370 = load { i64, i64 }, { i64, i64 }* %key13, align 8, !tbaa !3
  %elemtmp71 = extractvalue { i64, i64 } %key1370, 1
  %elemtmp72 = extractvalue { i64, i64 } %key1370, 0
  %lttmp73 = icmp slt i64 %elemtmp72, 5
  %key1374 = load { i64, i64 }, { i64, i64 }* %key13, align 8, !tbaa !3
  %elemtmp75 = extractvalue { i64, i64 } %key1374, 1
  %elemtmp76 = extractvalue { i64, i64 } %key1374, 0
  %eqtmp = icmp eq i64 %elemtmp76, 5
  %ortmp77 = or i1 %lttmp73, %eqtmp
  %key1378 = load { i64, i64 }, { i64, i64 }* %key13, align 8, !tbaa !3
  %elemtmp79 = extractvalue { i64, i64 } %key1378, 1
  %elemtmp80 = extractvalue { i64, i64 } %key1378, 0
  %lttmp81 = icmp slt i64 %elemtmp79, 6
  %key1382 = load { i64, i64 }, { i64, i64 }* %key13, align 8, !tbaa !3
  %elemtmp83 = extractvalue { i64, i64 } %key1382, 1
  %elemtmp84 = extractvalue { i64, i64 } %key1382, 0
  %eqtmp85 = icmp eq i64 %elemtmp83, 6
  %ortmp86 = or i1 %lttmp81, %eqtmp85
  %ortmp87 = or i1 %ortmp77, %ortmp86
  %idx988 = load i64, i64* %idx9, align 8, !tbaa !3
  %hoisted589 = load i64, i64* %hoisted5, align 8, !tbaa !3
  %lttmp90 = icmp slt i64 %idx988, %hoisted589
  %andtmp = and i1 %ortmp87, %lttmp90
  br i1 %andtmp, label %loopbody68, label %loopend69

loopbody68:                                       ; preds = %ifend94, %loopcond67
  br label %if91

loopend69:                                        ; preds = %ifend94, %loopcond67
  br label %ifend38

if91:                                             ; preds = %loopbody68
  %key1395 = load { i64, i64 }, { i64, i64 }* %key13, align 8, !tbaa !3
  %elemtmp96 = extractvalue { i64, i64 } %key1395, 1
  %elemtmp97 = extractvalue { i64, i64 } %key1395, 0
  %lttmp98 = icmp slt i64 %elemtmp97, 5
  %key1399 = load { i64, i64 }, { i64, i64 }* %key13, align 8, !tbaa !3
  %elemtmp100 = extractvalue { i64, i64 } %key1399, 1
  %elemtmp101 = extractvalue { i64, i64 } %key1399, 0
  %eqtmp102 = icmp eq i64 %elemtmp101, 5
  %ortmp103 = or i1 %lttmp98, %eqtmp102
  %key13104 = load { i64, i64 }, { i64, i64 }* %key13, align 8, !tbaa !3
  %elemtmp105 = extractvalue { i64, i64 } %key13104, 1
  %elemtmp106 = extractvalue { i64, i64 } %key13104, 0
  %lttmp107 = icmp slt i64 %elemtmp105, 6
  %key13108 = load { i64, i64 }, { i64, i64 }* %key13, align 8, !tbaa !3
  %elemtmp109 = extractvalue { i64, i64 } %key13108, 1
  %elemtmp110 = extractvalue { i64, i64 } %key13108, 0
  %eqtmp111 = icmp eq i64 %elemtmp109, 6
  %ortmp112 = or i1 %lttmp107, %eqtmp111
  %key13113 = load { i64, i64 }, { i64, i64 }* %key13, align 8, !tbaa !3
  %elemtmp114 = extractvalue { i64, i64 } %key13113, 1
  %elemtmp115 = extractvalue { i64, i64 } %key13113, 0
  %lttmp116 = icmp slt i64 %elemtmp115, 3
  %nottmp117 = xor i1 %lttmp116, true
  %key13118 = load { i64, i64 }, { i64, i64 }* %key13, align 8, !tbaa !3
  %elemtmp119 = extractvalue { i64, i64 } %key13118, 1
  %elemtmp120 = extractvalue { i64, i64 } %key13118, 0
  %lttmp121 = icmp slt i64 %elemtmp119, 4
  %nottmp122 = xor i1 %lttmp121, true
  %andtmp123 = and i1 %nottmp117, %nottmp122
  %andtmp124 = and i1 %ortmp112, %andtmp123
  %andtmp125 = and i1 %ortmp103, %andtmp124
  br i1 %andtmp125, label %then92, label %else93

then92:                                           ; preds = %if91
  %idx9126 = load i64, i64* %idx9, align 8, !tbaa !3
  %multmp127 = mul nsw i64 %idx9126, 4
  %addtmp128 = add nsw i64 0, %multmp127
  %addtmp129 = add nsw i64 %addtmp128, 2
  %buf130 = getelementptr inbounds %params, %params* %0, i32 0, i32 0
  %buf_ptr131 = load [75 x i64]*, [75 x i64]** %buf130, align 8, !tbaa !5
  %buf_ptr_cast132 = bitcast [75 x i64]* %buf_ptr131 to i8*
  %slice_ptr133 = getelementptr inbounds i8, i8* %buf_ptr_cast132, i64 %addtmp129
  %slice_ptr_cast = bitcast i8* %slice_ptr133 to i16*
  %slice_val134 = load i16, i16* %slice_ptr_cast, align 2, !tbaa !7
  %int_val135 = sext i16 %slice_val134 to i64
  %addtmp136 = add nsw i64 %int_val135, 400
  %addtmp137 = add nsw i64 %addtmp136, 0
  store i64 %addtmp137, i64* %vstart1, align 8, !tbaa !3
  %key13138 = load { i64, i64 }, { i64, i64 }* %key13, align 8, !tbaa !3
  store { i64, i64 } %key13138, { i64, i64 }* %key2, align 8, !tbaa !3
  %vstart1139 = load i64, i64* %vstart1, align 8, !tbaa !3
  store i64 %vstart1139, i64* %cstart14, align 8, !tbaa !3
  %cstart14140 = load i64, i64* %cstart14, align 8, !tbaa !3
  %addtmp141 = add nsw i64 %cstart14140, 1
  store i64 %addtmp141, i64* %cstart15, align 8, !tbaa !3
  %key2142 = load { i64, i64 }, { i64, i64 }* %key2, align 8, !tbaa !3
  %elemtmp143 = extractvalue { i64, i64 } %key2142, 1
  %elemtmp144 = extractvalue { i64, i64 } %key2142, 0
  %key2145 = load { i64, i64 }, { i64, i64 }* %key2, align 8, !tbaa !3
  %elemtmp146 = extractvalue { i64, i64 } %key2145, 1
  %elemtmp147 = extractvalue { i64, i64 } %key2145, 0
  %cstart14148 = load i64, i64* %cstart14, align 8, !tbaa !3
  %buf149 = getelementptr inbounds %params, %params* %0, i32 0, i32 0
  %buf_ptr150 = load [75 x i64]*, [75 x i64]** %buf149, align 8, !tbaa !5
  %buf_ptr_cast151 = bitcast [75 x i64]* %buf_ptr150 to i8*
  %slice_ptr152 = getelementptr inbounds i8, i8* %buf_ptr_cast151, i64 %cstart14148
  %slice_val153 = load i8, i8* %slice_ptr152, align 1, !tbaa !7
  %int_val154 = sext i8 %slice_val153 to i64
  %cstart15155 = load i64, i64* %cstart15, align 8, !tbaa !3
  %buf156 = getelementptr inbounds %params, %params* %0, i32 0, i32 0
  %buf_ptr157 = load [75 x i64]*, [75 x i64]** %buf156, align 8, !tbaa !5
  %buf_ptr_cast158 = bitcast [75 x i64]* %buf_ptr157 to i8*
  %slice_ptr159 = getelementptr inbounds i8, i8* %buf_ptr_cast158, i64 %cstart15155
  %slice_val160 = load i8, i8* %slice_ptr159, align 1, !tbaa !7
  %int_val161 = sext i8 %slice_val160 to i64
  %ptrtmp163 = getelementptr inbounds { i64, i64, i64, i64 }, { i64, i64, i64, i64 }* %tupleptrtmp162, i32 0, i32 0
  store i64 %elemtmp144, i64* %ptrtmp163, align 8, !tbaa !3
  %ptrtmp164 = getelementptr inbounds { i64, i64, i64, i64 }, { i64, i64, i64, i64 }* %tupleptrtmp162, i32 0, i32 1
  store i64 %elemtmp146, i64* %ptrtmp164, align 8, !tbaa !3
  %ptrtmp165 = getelementptr inbounds { i64, i64, i64, i64 }, { i64, i64, i64, i64 }* %tupleptrtmp162, i32 0, i32 2
  store i64 %int_val154, i64* %ptrtmp165, align 8, !tbaa !3
  %ptrtmp166 = getelementptr inbounds { i64, i64, i64, i64 }, { i64, i64, i64, i64 }* %tupleptrtmp162, i32 0, i32 3
  store i64 %int_val161, i64* %ptrtmp166, align 8, !tbaa !3
  %tupletmp167 = load { i64, i64, i64, i64 }, { i64, i64, i64, i64 }* %tupleptrtmp162, align 8, !tbaa !3
  %elemtmp168 = extractvalue { i64, i64, i64, i64 } %tupletmp167, 3
  %elemtmp169 = extractvalue { i64, i64, i64, i64 } %tupletmp167, 2
  %elemtmp170 = extractvalue { i64, i64, i64, i64 } %tupletmp167, 1
  %elemtmp171 = extractvalue { i64, i64, i64, i64 } %tupletmp167, 0
  call void asm sideeffect "", "X,~{memory}"(i64 %elemtmp171), !tbaa !9
  call void asm sideeffect "", "X,~{memory}"(i64 %elemtmp170), !tbaa !9
  call void asm sideeffect "", "X,~{memory}"(i64 %elemtmp169), !tbaa !9
  call void asm sideeffect "", "X,~{memory}"(i64 %elemtmp168), !tbaa !9
  br label %ifend94

else93:                                           ; preds = %if91
  br label %ifend94

ifend94:                                          ; preds = %else93, %then92
  %idx9172 = load i64, i64* %idx9, align 8, !tbaa !3
  %addtmp173 = add nsw i64 %idx9172, 1
  store i64 %addtmp173, i64* %idx9, align 8, !tbaa !3
  %idx9174 = load i64, i64* %idx9, align 8, !tbaa !3
  %multmp175 = mul nsw i64 %idx9174, 4
  %addtmp176 = add nsw i64 0, %multmp175
  store i64 %addtmp176, i64* %kstart0, align 8, !tbaa !3
  %kstart0177 = load i64, i64* %kstart0, align 8, !tbaa !3
  store i64 %kstart0177, i64* %cstart17, align 8, !tbaa !3
  %cstart17178 = load i64, i64* %cstart17, align 8, !tbaa !3
  %addtmp179 = add nsw i64 %cstart17178, 1
  store i64 %addtmp179, i64* %cstart18, align 8, !tbaa !3
  %cstart17180 = load i64, i64* %cstart17, align 8, !tbaa !3
  %buf181 = getelementptr inbounds %params, %params* %0, i32 0, i32 0
  %buf_ptr182 = load [75 x i64]*, [75 x i64]** %buf181, align 8, !tbaa !5
  %buf_ptr_cast183 = bitcast [75 x i64]* %buf_ptr182 to i8*
  %slice_ptr184 = getelementptr inbounds i8, i8* %buf_ptr_cast183, i64 %cstart17180
  %slice_val185 = load i8, i8* %slice_ptr184, align 1, !tbaa !7
  %int_val186 = sext i8 %slice_val185 to i64
  %cstart18187 = load i64, i64* %cstart18, align 8, !tbaa !3
  %buf188 = getelementptr inbounds %params, %params* %0, i32 0, i32 0
  %buf_ptr189 = load [75 x i64]*, [75 x i64]** %buf188, align 8, !tbaa !5
  %buf_ptr_cast190 = bitcast [75 x i64]* %buf_ptr189 to i8*
  %slice_ptr191 = getelementptr inbounds i8, i8* %buf_ptr_cast190, i64 %cstart18187
  %slice_val192 = load i8, i8* %slice_ptr191, align 1, !tbaa !7
  %int_val193 = sext i8 %slice_val192 to i64
  %ptrtmp195 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %tupleptrtmp194, i32 0, i32 0
  store i64 %int_val186, i64* %ptrtmp195, align 8, !tbaa !3
  %ptrtmp196 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %tupleptrtmp194, i32 0, i32 1
  store i64 %int_val193, i64* %ptrtmp196, align 8, !tbaa !3
  %tupletmp197 = load { i64, i64 }, { i64, i64 }* %tupleptrtmp194, align 8, !tbaa !3
  store { i64, i64 } %tupletmp197, { i64, i64 }* %key16, align 8, !tbaa !3
  %key16198 = load { i64, i64 }, { i64, i64 }* %key16, align 8, !tbaa !3
  store { i64, i64 } %key16198, { i64, i64 }* %key13, align 8, !tbaa !3
  %key13199 = load { i64, i64 }, { i64, i64 }* %key13, align 8, !tbaa !3
  %elemtmp200 = extractvalue { i64, i64 } %key13199, 1
  %elemtmp201 = extractvalue { i64, i64 } %key13199, 0
  %lttmp202 = icmp slt i64 %elemtmp201, 5
  %key13203 = load { i64, i64 }, { i64, i64 }* %key13, align 8, !tbaa !3
  %elemtmp204 = extractvalue { i64, i64 } %key13203, 1
  %elemtmp205 = extractvalue { i64, i64 } %key13203, 0
  %eqtmp206 = icmp eq i64 %elemtmp205, 5
  %ortmp207 = or i1 %lttmp202, %eqtmp206
  %key13208 = load { i64, i64 }, { i64, i64 }* %key13, align 8, !tbaa !3
  %elemtmp209 = extractvalue { i64, i64 } %key13208, 1
  %elemtmp210 = extractvalue { i64, i64 } %key13208, 0
  %lttmp211 = icmp slt i64 %elemtmp209, 6
  %key13212 = load { i64, i64 }, { i64, i64 }* %key13, align 8, !tbaa !3
  %elemtmp213 = extractvalue { i64, i64 } %key13212, 1
  %elemtmp214 = extractvalue { i64, i64 } %key13212, 0
  %eqtmp215 = icmp eq i64 %elemtmp213, 6
  %ortmp216 = or i1 %lttmp211, %eqtmp215
  %ortmp217 = or i1 %ortmp207, %ortmp216
  %idx9218 = load i64, i64* %idx9, align 8, !tbaa !3
  %hoisted5219 = load i64, i64* %hoisted5, align 8, !tbaa !3
  %lttmp220 = icmp slt i64 %idx9218, %hoisted5219
  %andtmp221 = and i1 %ortmp217, %lttmp220
  br i1 %andtmp221, label %loopbody68, label %loopend69
}

define %params* @create(i64* %0) {
entry:
  %malloccall = tail call i8* @malloc(i32 ptrtoint (%params* getelementptr (%params, %params* null, i32 1) to i32))
  %paramstmp = bitcast i8* %malloccall to %params*
  %buf = getelementptr inbounds %params, %params* %paramstmp, i32 0, i32 0
  %tmpbufp = bitcast i64* %0 to [75 x i64]*
  store [75 x i64]* %tmpbufp, [75 x i64]** %buf, align 8
  ret %params* %paramstmp
}

declare noalias i8* @malloc(i32)

attributes #0 = { argmemonly nofree nosync nounwind willreturn }
attributes #1 = { argmemonly readonly speculatable }
attributes #2 = { argmemonly norecurse nounwind readonly speculatable }
attributes #3 = { readnone }
attributes #4 = { argmemonly norecurse nounwind readonly }

!0 = !{!1, !1, i64 0, i64 0}
!1 = !{!"string", !2}
!2 = !{!"castor_root"}
!3 = !{!4, !4, i64 0, i64 0}
!4 = !{!"runtime", !2}
!5 = !{!6, !6, i64 0, i64 1}
!6 = !{!"db", !2}
!7 = !{!8, !8, i64 0, i64 1}
!8 = !{!"db_int", !6}
!9 = !{!10, !10, i64 0, i64 0}
!10 = !{!"consumer", !2}
