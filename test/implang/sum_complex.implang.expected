// Locals:
// found_tup1 : bool (persists=false)
// cstart9 : int (persists=true)
// tup0 : tuple[int, int] (persists=false)
// sum2 : int (persists=false)
// sum4 : fixed (persists=false)
// cstart8 : int (persists=true)
// count3 : int (persists=false)
// count7 : int (persists=true)
// cstart5 : int (persists=true)
// i6 : int (persists=true)
fun printer () : void {
    found_tup1 = false;
    sum2 = 0;
    count3 = 0;
    sum4 = 0.0;
    cstart5 = 0;
    i6 = 0;
    count7 = 5;
    loop (i6 < count7) {
        cstart8 = cstart5;
        cstart9 = cstart8 + 1;
        tup0 = (buf[cstart8 : 1], buf[cstart9 : 1]);
        sum2 = sum2 + tup0[0];
        count3 = count3 + 1;
        sum4 = sum4 + int2fl(tup0[0]) / int2fl(2);
        found_tup1 = true;
        cstart5 = cstart5 + 2;
        i6 = i6 + 1;
    }
    if (found_tup1) {
        print(tuple[int, fixed], (sum2 + 5, int2fl(count3) + sum4));
    } else {
         
    }
}
// Locals:
// found_tup1 : bool (persists=false)
// cstart9 : int (persists=true)
// tup0 : tuple[int, int] (persists=false)
// sum2 : int (persists=false)
// sum4 : fixed (persists=false)
// cstart8 : int (persists=true)
// count3 : int (persists=false)
// count7 : int (persists=true)
// cstart5 : int (persists=true)
// i6 : int (persists=true)
fun consumer () : void {
    found_tup1 = false;
    sum2 = 0;
    count3 = 0;
    sum4 = 0.0;
    cstart5 = 0;
    i6 = 0;
    count7 = 5;
    loop (i6 < count7) {
        cstart8 = cstart5;
        cstart9 = cstart8 + 1;
        tup0 = (buf[cstart8 : 1], buf[cstart9 : 1]);
        sum2 = sum2 + tup0[0];
        count3 = count3 + 1;
        sum4 = sum4 + int2fl(tup0[0]) / int2fl(2);
        found_tup1 = true;
        cstart5 = cstart5 + 2;
        i6 = i6 + 1;
    }
    if (found_tup1) {
        consume(tuple[int, fixed], (sum2 + 5, int2fl(count3) + sum4));
    } else {
         
    }
}
