// Locals:
// i1 : int (persists=true)
// count8 : int (persists=true)
// i7 : int (persists=true)
// cstart9 : int (persists=true)
// count2 : int (persists=true)
// cstart4 : int (persists=true)
// cstart3 : int (persists=true)
// cstart10 : int (persists=true)
// cstart0 : int (persists=true)
// cstart6 : int (persists=true)
// cstart5 : int (persists=true)
fun printer () : void {
    cstart0 = 1;
    i1 = 0;
    count2 = 2;
    loop (i1 < count2) {
        cstart3 = cstart0 + 1;
        cstart4 = cstart3 + 1;
        cstart5 = cstart4 + 1;
        cstart6 = cstart5 + 1 + 1;
        i7 = 0;
        count8 = buf[cstart5 : 1];
        loop (i7 < count8) {
            cstart9 = cstart6;
            cstart10 = cstart9 + 1;
            if (buf[cstart9 : 1] == id_c && buf[cstart3 : 1] == id_p) {
                print(tuple[int, int],
                (buf[cstart4 : 1], buf[cstart10 : 1]));
            } else {
                 
            }
            cstart6 = cstart6 + 2;
            i7 = i7 + 1;
        }
        cstart0 = cstart0 + buf[cstart0 : 1];
        i1 = i1 + 1;
    }
}
// Locals:
// i1 : int (persists=true)
// count8 : int (persists=true)
// i7 : int (persists=true)
// cstart9 : int (persists=true)
// count2 : int (persists=true)
// cstart4 : int (persists=true)
// cstart3 : int (persists=true)
// cstart10 : int (persists=true)
// cstart0 : int (persists=true)
// cstart6 : int (persists=true)
// cstart5 : int (persists=true)
fun consumer () : void {
    cstart0 = 1;
    i1 = 0;
    count2 = 2;
    loop (i1 < count2) {
        cstart3 = cstart0 + 1;
        cstart4 = cstart3 + 1;
        cstart5 = cstart4 + 1;
        cstart6 = cstart5 + 1 + 1;
        i7 = 0;
        count8 = buf[cstart5 : 1];
        loop (i7 < count8) {
            cstart9 = cstart6;
            cstart10 = cstart9 + 1;
            if (buf[cstart9 : 1] == id_c && buf[cstart3 : 1] == id_p) {
                consume(tuple[int, int],
                (buf[cstart4 : 1], buf[cstart10 : 1]));
            } else {
                 
            }
            cstart6 = cstart6 + 2;
            i7 = i7 + 1;
        }
        cstart0 = cstart0 + buf[cstart0 : 1];
        i1 = i1 + 1;
    }
}
