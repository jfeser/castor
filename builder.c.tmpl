#include <errno.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <strings.h>
#include <sys/mman.h>
#include <unistd.h>

#include <libpq-fe.h>

#include "builder.h"

PGconn *conn = NULL;

typedef void (*store_f)(char*);

PGresult *run_query(const char* query) {
  if (conn == NULL) {
    printf("Error: Database connection not initialized.");
    exit(1);
  }

  PGresult *result = PQexec(conn, query);
  if (PQresultStatus(result) != PGRES_TUPLES_OK) {
    printf("Error: Query failed.");
    exit(1);
  }
  return result;
}

int main(int argc, char **argv) {
  if (argc != 2) {
    printf("Usage: $name FILE");
    return 1;
  }

  char* path = argv[1];

  $types;

  int fd = open(path, O_RDWR | O_CREAT | O_TRUNC, 0666);
  if (fd < 0) {
    printf("Failed to open file %s. %s", path, strerror(errno));
    return 1;
  }
  if (ftruncate(fd, sizeof ($type)) < 0) {
    printf("Truncating file failed. %s", strerror(errno));
    return 1;
  }
  void* m_ptr = mmap(NULL, sizeof ($type), PROT_WRITE | PROT_READ, MAP_SHARED, fd, 0);
  if (m_ptr == MAP_FAILED) {
    printf("Mmap failed. %s", strerror(errno));
    return 1;
  }

  /* Open a database connection. */
  const char *keywords[] = { "dbname", NULL };
  const char *values[] = { "$dbname", NULL };
  conn = PQconnectdbParams(keywords, values, 0);
  ConnStatusType status = PQstatus(conn);
  if (status == CONNECTION_BAD) {
    printf("Error: Database connection failed.");
    return 1;
  }

  $type *data = ($type *)m_ptr;

  $stores

  return 0;
}
