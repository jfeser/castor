Checking call legality...
Checking call q0(param1, param2, param3)...
Checking call q1(param1, param2, param3)...
Checking call q3(param1, param2, param3, x0)...
Checking call q4(param1, param2, param3, x0)...
Checking call q5(param1, param2, param3, x0)...
Checking call q2(param1, param2, param3)...
Checking call q6(param1, param2, param3, k)...
Checking invariant preservation...
Done!
Adding query q7...
updating with 1 new solutions
update order:
  --> q7
considering update 1/1...
SOLUTION FOR q7 AT 0:00:00.075443 [size=578]
----------------------------------------
  _var690 : Bag<(Int, Int, String, Float, Int, String, String, Int, String)> = orders
  _var691 : Bag<(Int, Int, Int, Int, Int, Float, Float, Float, String, String, Int, Int, Int, String, String, String)> = lineitem
  return Map {k -> let q = Map {t -> t} (Filter {t -> streq((t).23, k)} (FlatMap {t1 -> Map {t2 -> ((t1).0, (t1).1, (t1).2, (t1).3, (t1).4, (t1).5, (t1).6, (t1).7, (t1).8, (t2).0, (t2).1, (t2).2, (t2).3, (t2).4, (t2).5, (t2).6, (t2).7, (t2).8, (t2).9, (t2).10, (t2).11, (t2).12, (t2).13, (t2).14, (t2).15)} (Filter {t2 -> ((t1).0 == (t2).0)} (Map {t -> t} (Map {t -> t} (Filter {t -> ((streq((t).14, param1) or streq((t).14, param2)) and (((t).11 < (t).12) and (((t).10 < (t).11) and (((t).12 >= param3) and ((t).12 < (param3 + year(1)))))))} (_var691)))))} (Map {t -> t} (_var690)))) in ((((len q) == 1) ? let t = (the q) in (t).23 : ""), (sum Map {t -> ((streq((t).5, "1-URGENT") or streq((t).5, "2-HIGH")) ? 1 : 0)} (q)), (sum Map {t -> (((not streq((t).5, "1-URGENT")) and (not streq((t).5, "2-HIGH"))) ? 1 : 0)} (q)))} ((distinct Map {t -> (t).23} (FlatMap {t1 -> Map {t2 -> ((t1).0, (t1).1, (t1).2, (t1).3, (t1).4, (t1).5, (t1).6, (t1).7, (t1).8, (t2).0, (t2).1, (t2).2, (t2).3, (t2).4, (t2).5, (t2).6, (t2).7, (t2).8, (t2).9, (t2).10, (t2).11, (t2).12, (t2).13, (t2).14, (t2).15)} (Filter {t2 -> ((t1).0 == (t2).0)} (Map {t -> t} (Map {t -> t} (Filter {t -> ((streq((t).14, param1) or streq((t).14, param2)) and (((t).11 < (t).12) and (((t).10 < (t).11) and (((t).12 >= param3) and ((t).12 < (param3 + year(1)))))))} (_var691)))))} (Map {t -> t} (_var690)))))
----------------------------------------
Stopping jobs
requesting stop for ImproveQueryJob[q7]
Stopping SafeQueue...
Done!
Generating IR...
Inlining calls...
Generating code for extension types...
Concretization functions:

_var552 : Bag<(Int, Int, String, Float, Int, String, String, Int, String)> = orders
_var553 : Bag<(Int, Int, Int, Int, Int, Float, Float, Float, String, String, Int, Int, Int, String, String, String)> = lineitem

query12:
  state _var552 : Bag<(Int, Int, String, Float, Int, String, String, Int, String)>
  state _var553 : Bag<(Int, Int, Int, Int, Int, Float, Float, Float, String, String, Int, Int, Int, String, String, String)>

  query q7(param1 : String, param2 : String, param3 : Int):
    Map {k -> let q = Map {t -> t} (Filter {t -> streq((t).23, k)} (FlatMap {t1 -> Map {t2 -> ((t1).0, (t1).1, (t1).2, (t1).3, (t1).4, (t1).5, (t1).6, (t1).7, (t1).8, (t2).0, (t2).1, (t2).2, (t2).3, (t2).4, (t2).5, (t2).6, (t2).7, (t2).8, (t2).9, (t2).10, (t2).11, (t2).12, (t2).13, (t2).14, (t2).15)} (Filter {t2 -> ((t1).0 == (t2).0)} (Map {t -> t} (Map {t -> t} (Filter {t -> ((streq((t).14, param1) or streq((t).14, param2)) and (((t).11 < (t).12) and (((t).10 < (t).11) and (((t).12 >= param3) and ((t).12 < (param3 + year(1)))))))} (_var553)))))} (Map {t -> t} (_var552)))) in ((((len q) == 1) ? let t = (the q) in (t).23 : ""), (sum Map {t -> ((streq((t).5, "1-URGENT") or streq((t).5, "2-HIGH")) ? 1 : 0)} (q)), (sum Map {t -> (((not streq((t).5, "1-URGENT")) and (not streq((t).5, "2-HIGH"))) ? 1 : 0)} (q)))} ((distinct Map {t -> (t).23} (FlatMap {t1 -> Map {t2 -> ((t1).0, (t1).1, (t1).2, (t1).3, (t1).4, (t1).5, (t1).6, (t1).7, (t1).8, (t2).0, (t2).1, (t2).2, (t2).3, (t2).4, (t2).5, (t2).6, (t2).7, (t2).8, (t2).9, (t2).10, (t2).11, (t2).12, (t2).13, (t2).14, (t2).15)} (Filter {t2 -> ((t1).0 == (t2).0)} (Map {t -> t} (Map {t -> t} (Filter {t -> ((streq((t).14, param1) or streq((t).14, param2)) and (((t).11 < (t).12) and (((t).10 < (t).11) and (((t).12 >= param3) and ((t).12 < (param3 + year(1)))))))} (_var553)))))} (Map {t -> t} (_var552)))))

Number of improvements done: 1
